
component counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000005f0  00000684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800066  00800066  0000068a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000902  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066d  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006bd  00000000  00000000  000016bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00001d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c4  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000855  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002a9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
   2:	87 c0       	rjmp	.+270    	; 0x112 <__bad_interrupt>
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	85 c0       	rjmp	.+266    	; 0x112 <__bad_interrupt>
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	83 c0       	rjmp	.+262    	; 0x112 <__bad_interrupt>
   c:	3d c1       	rjmp	.+634    	; 0x288 <__vector_6>
   e:	81 c0       	rjmp	.+258    	; 0x112 <__bad_interrupt>
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	7f c0       	rjmp	.+254    	; 0x112 <__bad_interrupt>
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	7d c0       	rjmp	.+250    	; 0x112 <__bad_interrupt>
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	7b c0       	rjmp	.+246    	; 0x112 <__bad_interrupt>
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	79 c0       	rjmp	.+242    	; 0x112 <__bad_interrupt>
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	77 c0       	rjmp	.+238    	; 0x112 <__bad_interrupt>
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	80 c0       	rjmp	.+256    	; 0x128 <segchar+0x14>
  28:	f1 c0       	rjmp	.+482    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  2a:	f0 c0       	rjmp	.+480    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  2c:	ef c0       	rjmp	.+478    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  2e:	ee c0       	rjmp	.+476    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  30:	ed c0       	rjmp	.+474    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  32:	ec c0       	rjmp	.+472    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  34:	eb c0       	rjmp	.+470    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  36:	ea c0       	rjmp	.+468    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  38:	e9 c0       	rjmp	.+466    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  3a:	e8 c0       	rjmp	.+464    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  3c:	e7 c0       	rjmp	.+462    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  3e:	e6 c0       	rjmp	.+460    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  40:	e2 c0       	rjmp	.+452    	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
  42:	e4 c0       	rjmp	.+456    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  44:	e3 c0       	rjmp	.+454    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  46:	73 c0       	rjmp	.+230    	; 0x12e <segchar+0x1a>
  48:	75 c0       	rjmp	.+234    	; 0x134 <segchar+0x20>
  4a:	77 c0       	rjmp	.+238    	; 0x13a <segchar+0x26>
  4c:	79 c0       	rjmp	.+242    	; 0x140 <segchar+0x2c>
  4e:	7b c0       	rjmp	.+246    	; 0x146 <segchar+0x32>
  50:	7d c0       	rjmp	.+250    	; 0x14c <segchar+0x38>
  52:	7f c0       	rjmp	.+254    	; 0x152 <segchar+0x3e>
  54:	81 c0       	rjmp	.+258    	; 0x158 <segchar+0x44>
  56:	83 c0       	rjmp	.+262    	; 0x15e <segchar+0x4a>
  58:	85 c0       	rjmp	.+266    	; 0x164 <segchar+0x50>
  5a:	d8 c0       	rjmp	.+432    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  5c:	d7 c0       	rjmp	.+430    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  5e:	d6 c0       	rjmp	.+428    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  60:	d5 c0       	rjmp	.+426    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  62:	d4 c0       	rjmp	.+424    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  64:	d3 c0       	rjmp	.+422    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  66:	d2 c0       	rjmp	.+420    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  68:	80 c0       	rjmp	.+256    	; 0x16a <segchar+0x56>
  6a:	d0 c0       	rjmp	.+416    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  6c:	84 c0       	rjmp	.+264    	; 0x176 <segchar+0x62>
  6e:	ce c0       	rjmp	.+412    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  70:	88 c0       	rjmp	.+272    	; 0x182 <segchar+0x6e>
  72:	8a c0       	rjmp	.+276    	; 0x188 <segchar+0x74>
  74:	8c c0       	rjmp	.+280    	; 0x18e <segchar+0x7a>
  76:	8e c0       	rjmp	.+284    	; 0x194 <segchar+0x80>
  78:	c9 c0       	rjmp	.+402    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  7a:	c8 c0       	rjmp	.+400    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  7c:	c7 c0       	rjmp	.+398    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  7e:	96 c0       	rjmp	.+300    	; 0x1ac <segchar+0x98>
  80:	c5 c0       	rjmp	.+394    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  82:	c4 c0       	rjmp	.+392    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  84:	c3 c0       	rjmp	.+390    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  86:	9e c0       	rjmp	.+316    	; 0x1c4 <segchar+0xb0>
  88:	c1 c0       	rjmp	.+386    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  8a:	c0 c0       	rjmp	.+384    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  8c:	bf c0       	rjmp	.+382    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  8e:	be c0       	rjmp	.+380    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  90:	a8 c0       	rjmp	.+336    	; 0x1e2 <segchar+0xce>
  92:	bc c0       	rjmp	.+376    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  94:	bb c0       	rjmp	.+374    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  96:	ba c0       	rjmp	.+372    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  98:	b9 c0       	rjmp	.+370    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  9a:	b8 c0       	rjmp	.+368    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  9c:	b7 c0       	rjmp	.+366    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  9e:	b6 c0       	rjmp	.+364    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  a0:	b5 c0       	rjmp	.+362    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  a2:	b4 c0       	rjmp	.+360    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  a4:	b3 c0       	rjmp	.+358    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  a6:	b2 c0       	rjmp	.+356    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  a8:	b1 c0       	rjmp	.+354    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  aa:	62 c0       	rjmp	.+196    	; 0x170 <segchar+0x5c>
  ac:	af c0       	rjmp	.+350    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  ae:	66 c0       	rjmp	.+204    	; 0x17c <segchar+0x68>
  b0:	ad c0       	rjmp	.+346    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  b2:	ac c0       	rjmp	.+344    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  b4:	8a c0       	rjmp	.+276    	; 0x1ca <segchar+0xb6>
  b6:	aa c0       	rjmp	.+340    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  b8:	70 c0       	rjmp	.+224    	; 0x19a <segchar+0x86>
  ba:	72 c0       	rjmp	.+228    	; 0x1a0 <segchar+0x8c>
  bc:	74 c0       	rjmp	.+232    	; 0x1a6 <segchar+0x92>
  be:	a6 c0       	rjmp	.+332    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  c0:	78 c0       	rjmp	.+240    	; 0x1b2 <segchar+0x9e>
  c2:	7a c0       	rjmp	.+244    	; 0x1b8 <segchar+0xa4>
  c4:	7c c0       	rjmp	.+248    	; 0x1be <segchar+0xaa>
  c6:	a2 c0       	rjmp	.+324    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  c8:	a1 c0       	rjmp	.+322    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  ca:	82 c0       	rjmp	.+260    	; 0x1d0 <segchar+0xbc>
  cc:	84 c0       	rjmp	.+264    	; 0x1d6 <segchar+0xc2>
  ce:	86 c0       	rjmp	.+268    	; 0x1dc <segchar+0xc8>
  d0:	9d c0       	rjmp	.+314    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  d2:	8a c0       	rjmp	.+276    	; 0x1e8 <segchar+0xd4>
  d4:	8c c0       	rjmp	.+280    	; 0x1ee <segchar+0xda>
  d6:	8e c0       	rjmp	.+284    	; 0x1f4 <segchar+0xe0>
  d8:	90 c0       	rjmp	.+288    	; 0x1fa <segchar+0xe6>
  da:	92 c0       	rjmp	.+292    	; 0x200 <__EEPROM_REGION_LENGTH__>

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf e5       	ldi	r28, 0x5F	; 95
  e2:	d4 e0       	ldi	r29, 0x04	; 4
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	10 e0       	ldi	r17, 0x00	; 0
  ea:	a0 e6       	ldi	r26, 0x60	; 96
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	e0 ef       	ldi	r30, 0xF0	; 240
  f0:	f5 e0       	ldi	r31, 0x05	; 5
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
  f4:	05 90       	lpm	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	a6 36       	cpi	r26, 0x66	; 102
  fa:	b1 07       	cpc	r27, r17
  fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	a6 e6       	ldi	r26, 0x66	; 102
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
 106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
 108:	ac 36       	cpi	r26, 0x6C	; 108
 10a:	b2 07       	cpc	r27, r18
 10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
 10e:	8f d1       	rcall	.+798    	; 0x42e <main>
 110:	6d c2       	rjmp	.+1242   	; 0x5ec <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <segchar>:
uint8_t prog_step = 2;     // Шаг подсчета  

// Учим зажигать цифры и буквы
void segchar(unsigned char ch)
{
	switch (ch)
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	b0 97       	sbiw	r30, 0x20	; 32
 11a:	eb 35       	cpi	r30, 0x5B	; 91
 11c:	f1 05       	cpc	r31, r1
 11e:	08 f0       	brcs	.+2      	; 0x122 <segchar+0xe>
 120:	75 c0       	rjmp	.+234    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
 122:	ed 5e       	subi	r30, 0xED	; 237
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	09 94       	ijmp
	{
		case ' ':  PORTB = 0b11111111; break;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	88 bb       	out	0x18, r24	; 24
 12c:	08 95       	ret
		case '0':  PORTB = 0b00101000; break;
 12e:	88 e2       	ldi	r24, 0x28	; 40
 130:	88 bb       	out	0x18, r24	; 24
 132:	08 95       	ret
		case '1':  PORTB = 0b10101111; break;
 134:	8f ea       	ldi	r24, 0xAF	; 175
 136:	88 bb       	out	0x18, r24	; 24
 138:	08 95       	ret
		case '2':  PORTB = 0b10011000; break;
 13a:	88 e9       	ldi	r24, 0x98	; 152
 13c:	88 bb       	out	0x18, r24	; 24
 13e:	08 95       	ret
		case '3':  PORTB = 0b10001010; break;
 140:	8a e8       	ldi	r24, 0x8A	; 138
 142:	88 bb       	out	0x18, r24	; 24
 144:	08 95       	ret
		case '4':  PORTB = 0b00001111; break;
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	88 bb       	out	0x18, r24	; 24
 14a:	08 95       	ret
		case '5':  PORTB = 0b01001010; break;
 14c:	8a e4       	ldi	r24, 0x4A	; 74
 14e:	88 bb       	out	0x18, r24	; 24
 150:	08 95       	ret
		case '6':  PORTB = 0b01001000; break;
 152:	88 e4       	ldi	r24, 0x48	; 72
 154:	88 bb       	out	0x18, r24	; 24
 156:	08 95       	ret
		case '7':  PORTB = 0b10101110; break;
 158:	8e ea       	ldi	r24, 0xAE	; 174
 15a:	88 bb       	out	0x18, r24	; 24
 15c:	08 95       	ret
		case '8':  PORTB = 0b00001000; break;
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	88 bb       	out	0x18, r24	; 24
 162:	08 95       	ret
		case '9':  PORTB = 0b00001010; break;
 164:	8a e0       	ldi	r24, 0x0A	; 10
 166:	88 bb       	out	0x18, r24	; 24
 168:	08 95       	ret
		
		case 'A':  PORTB = 	0b00001100; break;
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	88 bb       	out	0x18, r24	; 24
 16e:	08 95       	ret
		case 'b':  PORTB = 	0b01001001; break;
 170:	89 e4       	ldi	r24, 0x49	; 73
 172:	88 bb       	out	0x18, r24	; 24
 174:	08 95       	ret
		case 'C':  PORTB = 	0b01111000; break;
 176:	88 e7       	ldi	r24, 0x78	; 120
 178:	88 bb       	out	0x18, r24	; 24
 17a:	08 95       	ret
		case 'd':  PORTB = 	0b10001001; break;
 17c:	89 e8       	ldi	r24, 0x89	; 137
 17e:	88 bb       	out	0x18, r24	; 24
 180:	08 95       	ret
		case 'E':  PORTB = 	0b01011000; break;
 182:	88 e5       	ldi	r24, 0x58	; 88
 184:	88 bb       	out	0x18, r24	; 24
 186:	08 95       	ret
		case 'F':  PORTB = 	0b01011100; break;
 188:	8c e5       	ldi	r24, 0x5C	; 92
 18a:	88 bb       	out	0x18, r24	; 24
 18c:	08 95       	ret
		case 'G':  PORTB = 	0b01101000; break;
 18e:	88 e6       	ldi	r24, 0x68	; 104
 190:	88 bb       	out	0x18, r24	; 24
 192:	08 95       	ret
		case 'H':  PORTB = 	0b00001101; break;
 194:	8d e0       	ldi	r24, 0x0D	; 13
 196:	88 bb       	out	0x18, r24	; 24
 198:	08 95       	ret
		case 'i':  PORTB = 	0b11111000; break;
 19a:	88 ef       	ldi	r24, 0xF8	; 248
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	08 95       	ret
		case 'j':  PORTB = 	0b11101010; break;
 1a0:	8a ee       	ldi	r24, 0xEA	; 234
 1a2:	88 bb       	out	0x18, r24	; 24
 1a4:	08 95       	ret
		case 'k':  PORTB = 	0b00011101; break;
 1a6:	8d e1       	ldi	r24, 0x1D	; 29
 1a8:	88 bb       	out	0x18, r24	; 24
 1aa:	08 95       	ret
		case 'L':  PORTB = 	0b01111001; break;
 1ac:	89 e7       	ldi	r24, 0x79	; 121
 1ae:	88 bb       	out	0x18, r24	; 24
 1b0:	08 95       	ret
		case 'm':  PORTB = 	0b11001100; break;
 1b2:	8c ec       	ldi	r24, 0xCC	; 204
 1b4:	88 bb       	out	0x18, r24	; 24
 1b6:	08 95       	ret
		case 'n':  PORTB = 	0b11001101; break;
 1b8:	8d ec       	ldi	r24, 0xCD	; 205
 1ba:	88 bb       	out	0x18, r24	; 24
 1bc:	08 95       	ret
		case 'o':  PORTB = 	0b11001000; break;
 1be:	88 ec       	ldi	r24, 0xC8	; 200
 1c0:	88 bb       	out	0x18, r24	; 24
 1c2:	08 95       	ret
		case 'P':  PORTB = 	0b00011100; break;
 1c4:	8c e1       	ldi	r24, 0x1C	; 28
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	08 95       	ret
		case 'g':  PORTB = 	0b00001110; break;
 1ca:	8e e0       	ldi	r24, 0x0E	; 14
 1cc:	88 bb       	out	0x18, r24	; 24
 1ce:	08 95       	ret
		case 'r':  PORTB = 	0b11011101; break;
 1d0:	8d ed       	ldi	r24, 0xDD	; 221
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
		case 's':  PORTB = 	0b01001010; break;
 1d6:	8a e4       	ldi	r24, 0x4A	; 74
 1d8:	88 bb       	out	0x18, r24	; 24
 1da:	08 95       	ret
		case 't':  PORTB = 	0b01011001; break;
 1dc:	89 e5       	ldi	r24, 0x59	; 89
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	08 95       	ret
		case 'U':  PORTB = 	0b00101001; break;
 1e2:	89 e2       	ldi	r24, 0x29	; 41
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	08 95       	ret
		case 'v':  PORTB = 	0b11101000; break;
 1e8:	88 ee       	ldi	r24, 0xE8	; 232
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
		case 'w':  PORTB = 	0b00011011; break;
 1ee:	8b e1       	ldi	r24, 0x1B	; 27
 1f0:	88 bb       	out	0x18, r24	; 24
 1f2:	08 95       	ret
		case 'x':  PORTB = 	0b11101101; break;
 1f4:	8d ee       	ldi	r24, 0xED	; 237
 1f6:	88 bb       	out	0x18, r24	; 24
 1f8:	08 95       	ret
		case 'y':  PORTB = 	0b00001011; break;
 1fa:	8b e0       	ldi	r24, 0x0B	; 11
 1fc:	88 bb       	out	0x18, r24	; 24
 1fe:	08 95       	ret
		case 'z':  PORTB = 	0b11011010; break;
 200:	8a ed       	ldi	r24, 0xDA	; 218
 202:	88 bb       	out	0x18, r24	; 24
 204:	08 95       	ret
		
		case '-':  PORTB =  0b11011111; break;
 206:	8f ed       	ldi	r24, 0xDF	; 223
 208:	88 bb       	out	0x18, r24	; 24
 20a:	08 95       	ret
		default:   PORTB =  0b11111111; break; // Для остальных значений отключаем
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	88 bb       	out	0x18, r24	; 24
 210:	08 95       	ret

00000212 <turnoffall>:
}

// Выключить все
void turnoffall(void)
{
	DDRC  &= ~0b00001111; /* Аноды цифр по умолчанию на вход. Отключаем ток */
 212:	84 b3       	in	r24, 0x14	; 20
 214:	80 7f       	andi	r24, 0xF0	; 240
 216:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~0b00001111; /* Значени по умолчанию. Убираем остатки тока через подтяжку, если она есть */
 218:	85 b3       	in	r24, 0x15	; 21
 21a:	80 7f       	andi	r24, 0xF0	; 240
 21c:	85 bb       	out	0x15, r24	; 21
	
	PORTB = 0b11111111; /* Тушим свет для катодов */
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	88 bb       	out	0x18, r24	; 24
	DDRB  = 0b11111111; /* Инициировать настройки портов. Стоит дешевле, чем приносит пользы */
 222:	87 bb       	out	0x17, r24	; 23
 224:	08 95       	ret

00000226 <turnon>:
}

// Включаем требуемый разряд
void turnon(unsigned char seg)
{
	switch (seg)
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	69 f0       	breq	.+26     	; 0x244 <turnon+0x1e>
 22a:	28 f0       	brcs	.+10     	; 0x236 <turnon+0x10>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	89 f0       	breq	.+34     	; 0x252 <turnon+0x2c>
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	b1 f0       	breq	.+44     	; 0x260 <turnon+0x3a>
 234:	08 95       	ret
	{
		case 0:
		PORTC |= (1 << PORTC1); // Уровень 1
 236:	85 b3       	in	r24, 0x15	; 21
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	85 bb       	out	0x15, r24	; 21
		DDRC  |= (1 << PORTC1); // Выход
 23c:	84 b3       	in	r24, 0x14	; 20
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	84 bb       	out	0x14, r24	; 20
		break;
 242:	08 95       	ret
		
		case 1:
		PORTC |= (1 << PORTC2); // Уровень 1
 244:	85 b3       	in	r24, 0x15	; 21
 246:	84 60       	ori	r24, 0x04	; 4
 248:	85 bb       	out	0x15, r24	; 21
		DDRC  |= (1 << PORTC2); // Выход
 24a:	84 b3       	in	r24, 0x14	; 20
 24c:	84 60       	ori	r24, 0x04	; 4
 24e:	84 bb       	out	0x14, r24	; 20
		break;
 250:	08 95       	ret
		
		case 2:
		PORTC |= (1 << PORTC3); // Уровень 1
 252:	85 b3       	in	r24, 0x15	; 21
 254:	88 60       	ori	r24, 0x08	; 8
 256:	85 bb       	out	0x15, r24	; 21
		DDRC  |= (1 << PORTC3); // Выход
 258:	84 b3       	in	r24, 0x14	; 20
 25a:	88 60       	ori	r24, 0x08	; 8
 25c:	84 bb       	out	0x14, r24	; 20
		break;
 25e:	08 95       	ret
		
		case 3:
		PORTC |= (1 << PORTC0); // Уровень 1
 260:	85 b3       	in	r24, 0x15	; 21
 262:	81 60       	ori	r24, 0x01	; 1
 264:	85 bb       	out	0x15, r24	; 21
		DDRC  |= (1 << PORTC0); // Выход
 266:	84 b3       	in	r24, 0x14	; 20
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	84 bb       	out	0x14, r24	; 20
 26c:	08 95       	ret

0000026e <timer_ini>:
}

// Заводим таймер 
void timer_ini(void)
{
	TCCR1B |= (1<<WGM12); // Устанавливаем режим СТС (сброс по совпадению)
 26e:	8e b5       	in	r24, 0x2e	; 46
 270:	88 60       	ori	r24, 0x08	; 8
 272:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); // Устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
 274:	89 b7       	in	r24, 0x39	; 57
 276:	80 61       	ori	r24, 0x10	; 16
 278:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00000000;  // Записываем в регистр число для сравнения
 27a:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0b01100100;
 27c:	84 e6       	ldi	r24, 0x64	; 100
 27e:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS10);  // Установим делитель.
 280:	8e b5       	in	r24, 0x2e	; 46
 282:	81 60       	ori	r24, 0x01	; 1
 284:	8e bd       	out	0x2e, r24	; 46
 286:	08 95       	ret

00000288 <__vector_6>:
}

// Действия при прерывание по таймеру
ISR (TIMER1_COMPA_vect)
{
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	2f 93       	push	r18
 294:	3f 93       	push	r19
 296:	4f 93       	push	r20
 298:	5f 93       	push	r21
 29a:	6f 93       	push	r22
 29c:	7f 93       	push	r23
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
 2a2:	af 93       	push	r26
 2a4:	bf 93       	push	r27
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31
	static unsigned char new_state=0; // Переменные энкодера
	static unsigned char old_state=0; // Переменные энкодера

	new_state = (PINC & 0b00110000) >> 4;
 2aa:	83 b3       	in	r24, 0x13	; 19
 2ac:	80 73       	andi	r24, 0x30	; 48
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	95 95       	asr	r25
 2b2:	87 95       	ror	r24
 2b4:	95 95       	asr	r25
 2b6:	87 95       	ror	r24
 2b8:	95 95       	asr	r25
 2ba:	87 95       	ror	r24
 2bc:	95 95       	asr	r25
 2be:	87 95       	ror	r24
	
	// Если вдруг обнаружим низкое состояние (кнопка нажата), то обнулим счётчик
	if(!(PIND & 0b00010000)) cnt = 0; 
 2c0:	84 99       	sbic	0x10, 4	; 16
 2c2:	04 c0       	rjmp	.+8      	; 0x2cc <__vector_6+0x44>
 2c4:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <cnt+0x1>
 2c8:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <cnt>
	
	switch(old_state | new_state)
 2cc:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 2d0:	28 2b       	or	r18, r24
 2d2:	24 30       	cpi	r18, 0x04	; 4
 2d4:	99 f0       	breq	.+38     	; 0x2fc <__vector_6+0x74>
 2d6:	18 f4       	brcc	.+6      	; 0x2de <__vector_6+0x56>
 2d8:	21 30       	cpi	r18, 0x01	; 1
 2da:	29 f0       	breq	.+10     	; 0x2e6 <__vector_6+0x5e>
 2dc:	19 c0       	rjmp	.+50     	; 0x310 <__vector_6+0x88>
 2de:	2b 30       	cpi	r18, 0x0B	; 11
 2e0:	69 f0       	breq	.+26     	; 0x2fc <__vector_6+0x74>
 2e2:	2e 30       	cpi	r18, 0x0E	; 14
 2e4:	a9 f4       	brne	.+42     	; 0x310 <__vector_6+0x88>
	{
		case 0x01: case 0x0e:
		cnt++;
 2e6:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <cnt>
 2ea:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <cnt+0x1>
 2ee:	2f 5f       	subi	r18, 0xFF	; 255
 2f0:	3f 4f       	sbci	r19, 0xFF	; 255
 2f2:	30 93 6b 00 	sts	0x006B, r19	; 0x80006b <cnt+0x1>
 2f6:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <cnt>
		break;
 2fa:	0a c0       	rjmp	.+20     	; 0x310 <__vector_6+0x88>
		case 0x04: case 0x0b: 
		cnt--;
 2fc:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <cnt>
 300:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <cnt+0x1>
 304:	21 50       	subi	r18, 0x01	; 1
 306:	31 09       	sbc	r19, r1
 308:	30 93 6b 00 	sts	0x006B, r19	; 0x80006b <cnt+0x1>
 30c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <cnt>
		break;
	}
	old_state = new_state << 2;
 310:	88 0f       	add	r24, r24
 312:	88 0f       	add	r24, r24
 314:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
	
	// Выводим цифру на индикатор 
	turnoffall();       // Отключаем все
 318:	7c df       	rcall	.-264    	; 0x212 <turnoffall>
	segchar(R[n_count]);
 31a:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <n_count>
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	ef 59       	subi	r30, 0x9F	; 159
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	80 81       	ld	r24, Z
 326:	f6 de       	rcall	.-532    	; 0x114 <segchar>
	turnon(n_count);    // Включаем ток 
 328:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <n_count>
 32c:	7c df       	rcall	.-264    	; 0x226 <turnon>
	if (++n_count >= sizeof(R) / sizeof(R[0])) n_count = 0;
 32e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <n_count>
 332:	8f 5f       	subi	r24, 0xFF	; 255
 334:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <n_count>
 338:	84 30       	cpi	r24, 0x04	; 4
 33a:	10 f0       	brcs	.+4      	; 0x340 <__vector_6+0xb8>
 33c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <n_count>
	
	//--------------------------------------------
	if(!(PIND & 0b00001000) && consider_Down < 10) consider_Down++;  // Будем считать инкрементировать нажатое состояние кнопки 
 340:	83 99       	sbic	0x10, 3	; 16
 342:	08 c0       	rjmp	.+16     	; 0x354 <__vector_6+0xcc>
 344:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <consider_Down>
 348:	8a 30       	cpi	r24, 0x0A	; 10
 34a:	20 f4       	brcc	.+8      	; 0x354 <__vector_6+0xcc>
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <consider_Down>
 352:	05 c0       	rjmp	.+10     	; 0x35e <__vector_6+0xd6>
	else consider_Down--;                                            // Будем декрементировать если кнопка отпущена 
 354:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <consider_Down>
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <consider_Down>
	//--------------------------------------------
	if(!(PIND & 0b00000100) && consider_Up < 10) consider_Up++;      // Будем считать инкрементировать нажатое состояние кнопки
 35e:	82 99       	sbic	0x10, 2	; 16
 360:	08 c0       	rjmp	.+16     	; 0x372 <__vector_6+0xea>
 362:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <consider_Up>
 366:	8a 30       	cpi	r24, 0x0A	; 10
 368:	20 f4       	brcc	.+8      	; 0x372 <__vector_6+0xea>
 36a:	8f 5f       	subi	r24, 0xFF	; 255
 36c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <consider_Up>
 370:	05 c0       	rjmp	.+10     	; 0x37c <__vector_6+0xf4>
	else consider_Up--;                                              // Будем декрементировать если кнопка отпущена
 372:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <consider_Up>
 376:	81 50       	subi	r24, 0x01	; 1
 378:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <consider_Up>
	//--------------------------------------------
}
 37c:	ff 91       	pop	r31
 37e:	ef 91       	pop	r30
 380:	bf 91       	pop	r27
 382:	af 91       	pop	r26
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	7f 91       	pop	r23
 38a:	6f 91       	pop	r22
 38c:	5f 91       	pop	r21
 38e:	4f 91       	pop	r20
 390:	3f 91       	pop	r19
 392:	2f 91       	pop	r18
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <P>:
*/
// Меняем точку зрения (меняем очередность сегментов)
uint8_t P (uint8_t x)
{
	return ((sizeof(R) / sizeof(R[0])) - 1) - x;
}
 39e:	93 e0       	ldi	r25, 0x03	; 3
 3a0:	98 1b       	sub	r25, r24
 3a2:	89 2f       	mov	r24, r25
 3a4:	08 95       	ret

000003a6 <ledprint>:

// Присваиваем каждому сигменту своё число
void ledprint(unsigned int number, unsigned char Rl[4])
{
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	7c 01       	movw	r14, r24
 3b2:	8b 01       	movw	r16, r22
	for (uint8_t i = 0; i < sizeof(R) / sizeof(R[0]); i++)
 3b4:	c0 e0       	ldi	r28, 0x00	; 0
 3b6:	33 c0       	rjmp	.+102    	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
	{
		// Rl[P(i)] возвращяем удобное для нас значения 
		Rl[P(i)] = '0' + number % 10;  
 3b8:	8c 2f       	mov	r24, r28
 3ba:	f1 df       	rcall	.-30     	; 0x39e <P>
 3bc:	f8 01       	movw	r30, r16
 3be:	e8 0f       	add	r30, r24
 3c0:	f1 1d       	adc	r31, r1
 3c2:	97 01       	movw	r18, r14
 3c4:	ad ec       	ldi	r26, 0xCD	; 205
 3c6:	bc ec       	ldi	r27, 0xCC	; 204
 3c8:	05 d1       	rcall	.+522    	; 0x5d4 <__umulhisi3>
 3ca:	96 95       	lsr	r25
 3cc:	87 95       	ror	r24
 3ce:	96 95       	lsr	r25
 3d0:	87 95       	ror	r24
 3d2:	96 95       	lsr	r25
 3d4:	87 95       	ror	r24
 3d6:	9c 01       	movw	r18, r24
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	82 0f       	add	r24, r18
 3ea:	93 1f       	adc	r25, r19
 3ec:	97 01       	movw	r18, r14
 3ee:	28 1b       	sub	r18, r24
 3f0:	39 0b       	sbc	r19, r25
 3f2:	c9 01       	movw	r24, r18
 3f4:	80 5d       	subi	r24, 0xD0	; 208
 3f6:	80 83       	st	Z, r24
		if(i && !number) Rl[P(i)] = ' ';
 3f8:	cc 23       	and	r28, r28
 3fa:	29 f0       	breq	.+10     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 3fc:	e1 14       	cp	r14, r1
 3fe:	f1 04       	cpc	r15, r1
 400:	11 f4       	brne	.+4      	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 402:	80 e2       	ldi	r24, 0x20	; 32
 404:	80 83       	st	Z, r24
		number /= 10;
 406:	97 01       	movw	r18, r14
 408:	ad ec       	ldi	r26, 0xCD	; 205
 40a:	bc ec       	ldi	r27, 0xCC	; 204
 40c:	e3 d0       	rcall	.+454    	; 0x5d4 <__umulhisi3>
 40e:	7c 01       	movw	r14, r24
 410:	f6 94       	lsr	r15
 412:	e7 94       	ror	r14
 414:	f6 94       	lsr	r15
 416:	e7 94       	ror	r14
 418:	f6 94       	lsr	r15
 41a:	e7 94       	ror	r14
}

// Присваиваем каждому сигменту своё число
void ledprint(unsigned int number, unsigned char Rl[4])
{
	for (uint8_t i = 0; i < sizeof(R) / sizeof(R[0]); i++)
 41c:	cf 5f       	subi	r28, 0xFF	; 255
 41e:	c4 30       	cpi	r28, 0x04	; 4
 420:	58 f2       	brcs	.-106    	; 0x3b8 <ledprint+0x12>
		// Rl[P(i)] возвращяем удобное для нас значения 
		Rl[P(i)] = '0' + number % 10;  
		if(i && !number) Rl[P(i)] = ' ';
		number /= 10;
	}
}
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	08 95       	ret

0000042e <main>:

// Начинаем начинать 
int main(void)
{
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	00 d0       	rcall	.+0      	; 0x434 <main+0x6>
 434:	00 d0       	rcall	.+0      	; 0x436 <main+0x8>
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
	unsigned char Rx[4];    // Обьявим локальный массив для разрядов 
	short cnt_local = 0;    // Для сохранения подсчета внутри критической секции
	bool update;            // Флаг перерисовки дисплея
	bool klik_Down = false; // Состаяние кнопки Down
	bool klik_Up = false;   // Состаяние кнопки Up
	DDRC  &= ~0b00110000;   // Вход энкодера и кнопки
 43a:	84 b3       	in	r24, 0x14	; 20
 43c:	8f 7c       	andi	r24, 0xCF	; 207
 43e:	84 bb       	out	0x14, r24	; 20
	PORTC |=  0b00110000;   // Подтяжка
 440:	85 b3       	in	r24, 0x15	; 21
 442:	80 63       	ori	r24, 0x30	; 48
 444:	85 bb       	out	0x15, r24	; 21
	DDRD  &= ~0b00010000;   // Кнопка сброса
 446:	81 b3       	in	r24, 0x11	; 17
 448:	8f 7e       	andi	r24, 0xEF	; 239
 44a:	81 bb       	out	0x11, r24	; 17
	PORTD |=  0b00010000;   // Кнопка сброса
 44c:	82 b3       	in	r24, 0x12	; 18
 44e:	80 61       	ori	r24, 0x10	; 16
 450:	82 bb       	out	0x12, r24	; 18
	DDRD  &= ~0b00001000;   // Кнопка down
 452:	81 b3       	in	r24, 0x11	; 17
 454:	87 7f       	andi	r24, 0xF7	; 247
 456:	81 bb       	out	0x11, r24	; 17
	PORTD |=  0b00001000;   // Кнопка down
 458:	82 b3       	in	r24, 0x12	; 18
 45a:	88 60       	ori	r24, 0x08	; 8
 45c:	82 bb       	out	0x12, r24	; 18
	DDRD  &= ~0b00000100;   // Кнопка up
 45e:	81 b3       	in	r24, 0x11	; 17
 460:	8b 7f       	andi	r24, 0xFB	; 251
 462:	81 bb       	out	0x11, r24	; 17
	PORTD |=  0b00000100;   // Кнопка up
 464:	82 b3       	in	r24, 0x12	; 18
 466:	84 60       	ori	r24, 0x04	; 4
 468:	82 bb       	out	0x12, r24	; 18
	//--------------------------------------------
	timer_ini();
 46a:	01 df       	rcall	.-510    	; 0x26e <timer_ini>
	turnoffall();
 46c:	d2 de       	rcall	.-604    	; 0x212 <turnoffall>
	//--------------------------------------------
	sei();                // Разрешаем прерывания. Это важно!
 46e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 470:	83 ec       	ldi	r24, 0xC3	; 195
 472:	99 e0       	ldi	r25, 0x09	; 9
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <__stack+0x15>
 478:	00 c0       	rjmp	.+0      	; 0x47a <__stack+0x1b>
 47a:	00 00       	nop
	_delay_ms(10);        // Задержка на вывод заставки
	update = true;        // Принудительно обновим дисплей в первый раз
 47c:	81 e0       	ldi	r24, 0x01	; 1

// Начинаем начинать 
int main(void)
{
	unsigned char Rx[4];    // Обьявим локальный массив для разрядов 
	short cnt_local = 0;    // Для сохранения подсчета внутри критической секции
 47e:	e1 2c       	mov	r14, r1
 480:	f1 2c       	mov	r15, r1
	_delay_ms(10);        // Задержка на вывод заставки
	update = true;        // Принудительно обновим дисплей в первый раз
	//--------------------------------------------	
	while(1)
	{
		cli();                // Открываем критическую секцию 
 482:	f8 94       	cli
		if (cnt_local != cnt) // Если счетчик изменился?
 484:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <cnt>
 488:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <cnt+0x1>
 48c:	e2 16       	cp	r14, r18
 48e:	f3 06       	cpc	r15, r19
 490:	29 f0       	breq	.+10     	; 0x49c <__stack+0x3d>
		{
			cnt_local = cnt;  // Обновляем Локальную копию счетчика
 492:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <cnt>
 496:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <cnt+0x1>
			update = true;    // Устанавливаем флаг перерисовки дисплея
 49a:	81 e0       	ldi	r24, 0x01	; 1
		}
		sei();                // Закрываем критическую секцию
 49c:	78 94       	sei
		
		//--------------------------------------------
		cli();                                     // Открываем критическую секцию
 49e:	f8 94       	cli
		if (consider_Down == 10) klik_Down = true; // Будем считать что кнопка нажата 
 4a0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <consider_Down>
 4a4:	9a 30       	cpi	r25, 0x0A	; 10
 4a6:	11 f4       	brne	.+4      	; 0x4ac <__stack+0x4d>
 4a8:	11 e0       	ldi	r17, 0x01	; 1
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <__stack+0x4f>
		else klik_Down = false;                    // Кнопка не тронутая 
 4ac:	10 e0       	ldi	r17, 0x00	; 0
		sei();                                     // Закрываем критическую секцию
 4ae:	78 94       	sei
		//--------------------------------------------
		cli();                                     // Открываем критическую секцию
 4b0:	f8 94       	cli
		if (consider_Up == 10) klik_Up = true;     // Будем считать что кнопка нажата
 4b2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <consider_Up>
 4b6:	9a 30       	cpi	r25, 0x0A	; 10
 4b8:	11 f4       	brne	.+4      	; 0x4be <__stack+0x5f>
 4ba:	01 e0       	ldi	r16, 0x01	; 1
 4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <__stack+0x61>
		else klik_Up = false;                      // Кнопка не тронутая
 4be:	00 e0       	ldi	r16, 0x00	; 0
		sei();                                     // Закрываем критическую секцию
 4c0:	78 94       	sei
		//--------------------------------------------
		if (update)           // Флаг установлен?
 4c2:	88 23       	and	r24, r24
 4c4:	01 f1       	breq	.+64     	; 0x506 <__stack+0xa7>
			/*
			Пересчитывам буфер.
			Вот здесь из отрицательного числа делаем положительное 
			что бы не зависть от направления вращения энкодера после включения
			*/
			ledprint(cnt_local >= 0 ? cnt_local : -cnt_local, Rx); // Шедевр простоты !!!
 4c6:	c7 01       	movw	r24, r14
 4c8:	ff 20       	and	r15, r15
 4ca:	24 f4       	brge	.+8      	; 0x4d4 <__stack+0x75>
 4cc:	88 27       	eor	r24, r24
 4ce:	99 27       	eor	r25, r25
 4d0:	8e 19       	sub	r24, r14
 4d2:	9f 09       	sbc	r25, r15
 4d4:	be 01       	movw	r22, r28
 4d6:	6f 5f       	subi	r22, 0xFF	; 255
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255
 4da:	65 df       	rcall	.-310    	; 0x3a6 <ledprint>
			
			//--------------------------------------------
			cli();            // Открываем критическую секцию 
 4dc:	f8 94       	cli
			for (int w = 0; w < sizeof(R) / sizeof(R[0]);  w++)
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0c c0       	rjmp	.+24     	; 0x4fc <__stack+0x9d>
			{
				R[w] = Rx[w]; // Обновляем Локальную копию массива регистров 
 4e4:	e1 e0       	ldi	r30, 0x01	; 1
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	ec 0f       	add	r30, r28
 4ea:	fd 1f       	adc	r31, r29
 4ec:	e8 0f       	add	r30, r24
 4ee:	f9 1f       	adc	r31, r25
 4f0:	20 81       	ld	r18, Z
 4f2:	fc 01       	movw	r30, r24
 4f4:	ef 59       	subi	r30, 0x9F	; 159
 4f6:	ff 4f       	sbci	r31, 0xFF	; 255
 4f8:	20 83       	st	Z, r18
			*/
			ledprint(cnt_local >= 0 ? cnt_local : -cnt_local, Rx); // Шедевр простоты !!!
			
			//--------------------------------------------
			cli();            // Открываем критическую секцию 
			for (int w = 0; w < sizeof(R) / sizeof(R[0]);  w++)
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	84 30       	cpi	r24, 0x04	; 4
 4fe:	91 05       	cpc	r25, r1
 500:	88 f3       	brcs	.-30     	; 0x4e4 <__stack+0x85>
			{
				R[w] = Rx[w]; // Обновляем Локальную копию массива регистров 
			}
			sei();            // Закрываем критическую секцию
 502:	78 94       	sei
		else klik_Up = false;                      // Кнопка не тронутая
		sei();                                     // Закрываем критическую секцию
		//--------------------------------------------
		if (update)           // Флаг установлен?
		{
			update = false;   // Сбрасывем флаг
 504:	80 e0       	ldi	r24, 0x00	; 0
			}
			sei();            // Закрываем критическую секцию
		}
		
		//--------------------------------------------
		if(klik_Up && prog_step == 2)
 506:	00 23       	and	r16, r16
 508:	b9 f0       	breq	.+46     	; 0x538 <__stack+0xd9>
 50a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 50e:	92 30       	cpi	r25, 0x02	; 2
 510:	99 f4       	brne	.+38     	; 0x538 <__stack+0xd9>
		{
			prog_step = 4;
 512:	94 e0       	ldi	r25, 0x04	; 4
 514:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
			//R = {'P','r','g','4'};
			R[0] = 'P';
 518:	e1 e6       	ldi	r30, 0x61	; 97
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	90 e5       	ldi	r25, 0x50	; 80
 51e:	90 83       	st	Z, r25
			R[1] = 'r';
 520:	92 e7       	ldi	r25, 0x72	; 114
 522:	91 83       	std	Z+1, r25	; 0x01
			R[2] = 'g';
 524:	97 e6       	ldi	r25, 0x67	; 103
 526:	92 83       	std	Z+2, r25	; 0x02
			R[3] = '0' + prog_step;
 528:	94 e3       	ldi	r25, 0x34	; 52
 52a:	93 83       	std	Z+3, r25	; 0x03
 52c:	e3 ec       	ldi	r30, 0xC3	; 195
 52e:	f9 e0       	ldi	r31, 0x09	; 9
 530:	31 97       	sbiw	r30, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <__stack+0xd1>
 534:	00 c0       	rjmp	.+0      	; 0x536 <__stack+0xd7>
 536:	00 00       	nop
			_delay_ms(10);
		}
		if(klik_Up && prog_step == 4)
 538:	00 23       	and	r16, r16
 53a:	b9 f0       	breq	.+46     	; 0x56a <__stack+0x10b>
 53c:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 540:	94 30       	cpi	r25, 0x04	; 4
 542:	99 f4       	brne	.+38     	; 0x56a <__stack+0x10b>
		{
			prog_step = 8;
 544:	98 e0       	ldi	r25, 0x08	; 8
 546:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
			R[0] = 'P';
 54a:	e1 e6       	ldi	r30, 0x61	; 97
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	90 e5       	ldi	r25, 0x50	; 80
 550:	90 83       	st	Z, r25
			R[1] = 'r';
 552:	92 e7       	ldi	r25, 0x72	; 114
 554:	91 83       	std	Z+1, r25	; 0x01
			R[2] = 'g';
 556:	97 e6       	ldi	r25, 0x67	; 103
 558:	92 83       	std	Z+2, r25	; 0x02
			R[3] = '0' + prog_step;
 55a:	98 e3       	ldi	r25, 0x38	; 56
 55c:	93 83       	std	Z+3, r25	; 0x03
 55e:	e3 ec       	ldi	r30, 0xC3	; 195
 560:	f9 e0       	ldi	r31, 0x09	; 9
 562:	31 97       	sbiw	r30, 0x01	; 1
 564:	f1 f7       	brne	.-4      	; 0x562 <__stack+0x103>
 566:	00 c0       	rjmp	.+0      	; 0x568 <__stack+0x109>
 568:	00 00       	nop
			_delay_ms(10);
		}
		if(klik_Down && prog_step == 8)
 56a:	11 23       	and	r17, r17
 56c:	b9 f0       	breq	.+46     	; 0x59c <__stack+0x13d>
 56e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 572:	98 30       	cpi	r25, 0x08	; 8
 574:	99 f4       	brne	.+38     	; 0x59c <__stack+0x13d>
		{
			prog_step = 4;
 576:	94 e0       	ldi	r25, 0x04	; 4
 578:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
			R[0] = 'P';
 57c:	e1 e6       	ldi	r30, 0x61	; 97
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	90 e5       	ldi	r25, 0x50	; 80
 582:	90 83       	st	Z, r25
			R[1] = 'r';
 584:	92 e7       	ldi	r25, 0x72	; 114
 586:	91 83       	std	Z+1, r25	; 0x01
			R[2] = 'g';
 588:	97 e6       	ldi	r25, 0x67	; 103
 58a:	92 83       	std	Z+2, r25	; 0x02
			R[3] = '0' + prog_step;
 58c:	94 e3       	ldi	r25, 0x34	; 52
 58e:	93 83       	std	Z+3, r25	; 0x03
 590:	e3 ec       	ldi	r30, 0xC3	; 195
 592:	f9 e0       	ldi	r31, 0x09	; 9
 594:	31 97       	sbiw	r30, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <__stack+0x135>
 598:	00 c0       	rjmp	.+0      	; 0x59a <__stack+0x13b>
 59a:	00 00       	nop
			_delay_ms(10);
		}
		if(klik_Down && prog_step == 4)
 59c:	11 23       	and	r17, r17
 59e:	09 f4       	brne	.+2      	; 0x5a2 <__stack+0x143>
 5a0:	70 cf       	rjmp	.-288    	; 0x482 <__stack+0x23>
 5a2:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5a6:	94 30       	cpi	r25, 0x04	; 4
 5a8:	09 f0       	breq	.+2      	; 0x5ac <__stack+0x14d>
 5aa:	6b cf       	rjmp	.-298    	; 0x482 <__stack+0x23>
		{
			prog_step = 2;
 5ac:	92 e0       	ldi	r25, 0x02	; 2
 5ae:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
			R[0] = 'P';
 5b2:	e1 e6       	ldi	r30, 0x61	; 97
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	90 e5       	ldi	r25, 0x50	; 80
 5b8:	90 83       	st	Z, r25
			R[1] = 'r';
 5ba:	92 e7       	ldi	r25, 0x72	; 114
 5bc:	91 83       	std	Z+1, r25	; 0x01
			R[2] = 'g';
 5be:	97 e6       	ldi	r25, 0x67	; 103
 5c0:	92 83       	std	Z+2, r25	; 0x02
			R[3] = '0' + prog_step;
 5c2:	92 e3       	ldi	r25, 0x32	; 50
 5c4:	93 83       	std	Z+3, r25	; 0x03
 5c6:	e3 ec       	ldi	r30, 0xC3	; 195
 5c8:	f9 e0       	ldi	r31, 0x09	; 9
 5ca:	31 97       	sbiw	r30, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <__stack+0x16b>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <__stack+0x171>
 5d0:	00 00       	nop
 5d2:	57 cf       	rjmp	.-338    	; 0x482 <__stack+0x23>

000005d4 <__umulhisi3>:
 5d4:	a2 9f       	mul	r26, r18
 5d6:	b0 01       	movw	r22, r0
 5d8:	b3 9f       	mul	r27, r19
 5da:	c0 01       	movw	r24, r0
 5dc:	a3 9f       	mul	r26, r19
 5de:	01 d0       	rcall	.+2      	; 0x5e2 <__umulhisi3+0xe>
 5e0:	b2 9f       	mul	r27, r18
 5e2:	70 0d       	add	r23, r0
 5e4:	81 1d       	adc	r24, r1
 5e6:	11 24       	eor	r1, r1
 5e8:	91 1d       	adc	r25, r1
 5ea:	08 95       	ret

000005ec <_exit>:
 5ec:	f8 94       	cli

000005ee <__stop_program>:
 5ee:	ff cf       	rjmp	.-2      	; 0x5ee <__stop_program>
