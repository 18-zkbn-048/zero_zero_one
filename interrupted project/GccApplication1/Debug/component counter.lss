
component counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000007a4  00000838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080007c  0080007c  00000854  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b2d  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e2  00000000  00000000  00001485  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000919  00000000  00000000  00001c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  0000270c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000800  00000000  00000000  00002b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000333b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
   2:	87 c0       	rjmp	.+270    	; 0x112 <__bad_interrupt>
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	85 c0       	rjmp	.+266    	; 0x112 <__bad_interrupt>
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	83 c0       	rjmp	.+262    	; 0x112 <__bad_interrupt>
   c:	d0 c2       	rjmp	.+1440   	; 0x5ae <__vector_6>
   e:	81 c0       	rjmp	.+258    	; 0x112 <__bad_interrupt>
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	40 c1       	rjmp	.+640    	; 0x294 <__vector_9>
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	7d c0       	rjmp	.+250    	; 0x112 <__bad_interrupt>
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	7b c0       	rjmp	.+246    	; 0x112 <__bad_interrupt>
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	79 c0       	rjmp	.+242    	; 0x112 <__bad_interrupt>
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	77 c0       	rjmp	.+238    	; 0x112 <__bad_interrupt>
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	80 c0       	rjmp	.+256    	; 0x128 <segchar+0x14>
  28:	f4 c0       	rjmp	.+488    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  2a:	f3 c0       	rjmp	.+486    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  2c:	f2 c0       	rjmp	.+484    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  2e:	f1 c0       	rjmp	.+482    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  30:	f0 c0       	rjmp	.+480    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  32:	ef c0       	rjmp	.+478    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  34:	ee c0       	rjmp	.+476    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  36:	ed c0       	rjmp	.+474    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  38:	ec c0       	rjmp	.+472    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  3a:	eb c0       	rjmp	.+470    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  3c:	ea c0       	rjmp	.+468    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  3e:	e9 c0       	rjmp	.+466    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  40:	e5 c0       	rjmp	.+458    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
  42:	e1 c0       	rjmp	.+450    	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
  44:	e6 c0       	rjmp	.+460    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  46:	73 c0       	rjmp	.+230    	; 0x12e <segchar+0x1a>
  48:	75 c0       	rjmp	.+234    	; 0x134 <segchar+0x20>
  4a:	77 c0       	rjmp	.+238    	; 0x13a <segchar+0x26>
  4c:	79 c0       	rjmp	.+242    	; 0x140 <segchar+0x2c>
  4e:	7b c0       	rjmp	.+246    	; 0x146 <segchar+0x32>
  50:	7d c0       	rjmp	.+250    	; 0x14c <segchar+0x38>
  52:	7f c0       	rjmp	.+254    	; 0x152 <segchar+0x3e>
  54:	81 c0       	rjmp	.+258    	; 0x158 <segchar+0x44>
  56:	83 c0       	rjmp	.+262    	; 0x15e <segchar+0x4a>
  58:	85 c0       	rjmp	.+266    	; 0x164 <segchar+0x50>
  5a:	db c0       	rjmp	.+438    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  5c:	da c0       	rjmp	.+436    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  5e:	d9 c0       	rjmp	.+434    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  60:	d8 c0       	rjmp	.+432    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  62:	d7 c0       	rjmp	.+430    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  64:	d6 c0       	rjmp	.+428    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  66:	d5 c0       	rjmp	.+426    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  68:	80 c0       	rjmp	.+256    	; 0x16a <segchar+0x56>
  6a:	d3 c0       	rjmp	.+422    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  6c:	84 c0       	rjmp	.+264    	; 0x176 <segchar+0x62>
  6e:	d1 c0       	rjmp	.+418    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  70:	88 c0       	rjmp	.+272    	; 0x182 <segchar+0x6e>
  72:	8a c0       	rjmp	.+276    	; 0x188 <segchar+0x74>
  74:	8c c0       	rjmp	.+280    	; 0x18e <segchar+0x7a>
  76:	8e c0       	rjmp	.+284    	; 0x194 <segchar+0x80>
  78:	cc c0       	rjmp	.+408    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  7a:	cb c0       	rjmp	.+406    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  7c:	ca c0       	rjmp	.+404    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  7e:	96 c0       	rjmp	.+300    	; 0x1ac <segchar+0x98>
  80:	c8 c0       	rjmp	.+400    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  82:	c7 c0       	rjmp	.+398    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  84:	c6 c0       	rjmp	.+396    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  86:	9e c0       	rjmp	.+316    	; 0x1c4 <segchar+0xb0>
  88:	c4 c0       	rjmp	.+392    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  8a:	c3 c0       	rjmp	.+390    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  8c:	c2 c0       	rjmp	.+388    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  8e:	c1 c0       	rjmp	.+386    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  90:	a8 c0       	rjmp	.+336    	; 0x1e2 <segchar+0xce>
  92:	bf c0       	rjmp	.+382    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  94:	be c0       	rjmp	.+380    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  96:	bd c0       	rjmp	.+378    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  98:	bc c0       	rjmp	.+376    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  9a:	bb c0       	rjmp	.+374    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  9c:	ba c0       	rjmp	.+372    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  9e:	b9 c0       	rjmp	.+370    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  a0:	b8 c0       	rjmp	.+368    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  a2:	b7 c0       	rjmp	.+366    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  a4:	b6 c0       	rjmp	.+364    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  a6:	b5 c0       	rjmp	.+362    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  a8:	b4 c0       	rjmp	.+360    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  aa:	62 c0       	rjmp	.+196    	; 0x170 <segchar+0x5c>
  ac:	b2 c0       	rjmp	.+356    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  ae:	66 c0       	rjmp	.+204    	; 0x17c <segchar+0x68>
  b0:	b0 c0       	rjmp	.+352    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  b2:	af c0       	rjmp	.+350    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  b4:	8a c0       	rjmp	.+276    	; 0x1ca <segchar+0xb6>
  b6:	ad c0       	rjmp	.+346    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  b8:	70 c0       	rjmp	.+224    	; 0x19a <segchar+0x86>
  ba:	72 c0       	rjmp	.+228    	; 0x1a0 <segchar+0x8c>
  bc:	74 c0       	rjmp	.+232    	; 0x1a6 <segchar+0x92>
  be:	a9 c0       	rjmp	.+338    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  c0:	78 c0       	rjmp	.+240    	; 0x1b2 <segchar+0x9e>
  c2:	7a c0       	rjmp	.+244    	; 0x1b8 <segchar+0xa4>
  c4:	7c c0       	rjmp	.+248    	; 0x1be <segchar+0xaa>
  c6:	a5 c0       	rjmp	.+330    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  c8:	a4 c0       	rjmp	.+328    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  ca:	82 c0       	rjmp	.+260    	; 0x1d0 <segchar+0xbc>
  cc:	84 c0       	rjmp	.+264    	; 0x1d6 <segchar+0xc2>
  ce:	86 c0       	rjmp	.+268    	; 0x1dc <segchar+0xc8>
  d0:	a0 c0       	rjmp	.+320    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
  d2:	8a c0       	rjmp	.+276    	; 0x1e8 <segchar+0xd4>
  d4:	8c c0       	rjmp	.+280    	; 0x1ee <segchar+0xda>
  d6:	8e c0       	rjmp	.+284    	; 0x1f4 <segchar+0xe0>
  d8:	90 c0       	rjmp	.+288    	; 0x1fa <segchar+0xe6>
  da:	92 c0       	rjmp	.+292    	; 0x200 <__EEPROM_REGION_LENGTH__>

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf e5       	ldi	r28, 0x5F	; 95
  e2:	d4 e0       	ldi	r29, 0x04	; 4
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	10 e0       	ldi	r17, 0x00	; 0
  ea:	a0 e6       	ldi	r26, 0x60	; 96
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	e4 ea       	ldi	r30, 0xA4	; 164
  f0:	f7 e0       	ldi	r31, 0x07	; 7
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
  f4:	05 90       	lpm	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	ac 37       	cpi	r26, 0x7C	; 124
  fa:	b1 07       	cpc	r27, r17
  fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	ac e7       	ldi	r26, 0x7C	; 124
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
 106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
 108:	a3 39       	cpi	r26, 0x93	; 147
 10a:	b2 07       	cpc	r27, r18
 10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
 10e:	98 d2       	rcall	.+1328   	; 0x640 <main>
 110:	47 c3       	rjmp	.+1678   	; 0x7a0 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <segchar>:
}

// Учим зажигать цифры и буквы
static void segchar(unsigned char ch)
{
	switch (ch)
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	b0 97       	sbiw	r30, 0x20	; 32
 11a:	eb 35       	cpi	r30, 0x5B	; 91
 11c:	f1 05       	cpc	r31, r1
 11e:	08 f0       	brcs	.+2      	; 0x122 <segchar+0xe>
 120:	78 c0       	rjmp	.+240    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 122:	ed 5e       	subi	r30, 0xED	; 237
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	09 94       	ijmp
	{
		case ' ':  PORTB = 0b11111111; break;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	88 bb       	out	0x18, r24	; 24
 12c:	08 95       	ret
		case '0':  PORTB = 0b00101000; break;
 12e:	88 e2       	ldi	r24, 0x28	; 40
 130:	88 bb       	out	0x18, r24	; 24
 132:	08 95       	ret
		case '1':  PORTB = 0b10101111; break;
 134:	8f ea       	ldi	r24, 0xAF	; 175
 136:	88 bb       	out	0x18, r24	; 24
 138:	08 95       	ret
		case '2':  PORTB = 0b10011000; break;
 13a:	88 e9       	ldi	r24, 0x98	; 152
 13c:	88 bb       	out	0x18, r24	; 24
 13e:	08 95       	ret
		case '3':  PORTB = 0b10001010; break;
 140:	8a e8       	ldi	r24, 0x8A	; 138
 142:	88 bb       	out	0x18, r24	; 24
 144:	08 95       	ret
		case '4':  PORTB = 0b00001111; break;
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	88 bb       	out	0x18, r24	; 24
 14a:	08 95       	ret
		case '5':  PORTB = 0b01001010; break;
 14c:	8a e4       	ldi	r24, 0x4A	; 74
 14e:	88 bb       	out	0x18, r24	; 24
 150:	08 95       	ret
		case '6':  PORTB = 0b01001000; break;
 152:	88 e4       	ldi	r24, 0x48	; 72
 154:	88 bb       	out	0x18, r24	; 24
 156:	08 95       	ret
		case '7':  PORTB = 0b10101110; break;
 158:	8e ea       	ldi	r24, 0xAE	; 174
 15a:	88 bb       	out	0x18, r24	; 24
 15c:	08 95       	ret
		case '8':  PORTB = 0b00001000; break;
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	88 bb       	out	0x18, r24	; 24
 162:	08 95       	ret
		case '9':  PORTB = 0b00001010; break;
 164:	8a e0       	ldi	r24, 0x0A	; 10
 166:	88 bb       	out	0x18, r24	; 24
 168:	08 95       	ret
		
		case 'A':  PORTB = 	0b00001100; break;
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	88 bb       	out	0x18, r24	; 24
 16e:	08 95       	ret
		case 'b':  PORTB = 	0b01001001; break;
 170:	89 e4       	ldi	r24, 0x49	; 73
 172:	88 bb       	out	0x18, r24	; 24
 174:	08 95       	ret
		case 'C':  PORTB = 	0b01111000; break;
 176:	88 e7       	ldi	r24, 0x78	; 120
 178:	88 bb       	out	0x18, r24	; 24
 17a:	08 95       	ret
		case 'd':  PORTB = 	0b10001001; break;
 17c:	89 e8       	ldi	r24, 0x89	; 137
 17e:	88 bb       	out	0x18, r24	; 24
 180:	08 95       	ret
		case 'E':  PORTB = 	0b01011000; break;
 182:	88 e5       	ldi	r24, 0x58	; 88
 184:	88 bb       	out	0x18, r24	; 24
 186:	08 95       	ret
		case 'F':  PORTB = 	0b01011100; break;
 188:	8c e5       	ldi	r24, 0x5C	; 92
 18a:	88 bb       	out	0x18, r24	; 24
 18c:	08 95       	ret
		case 'G':  PORTB = 	0b01101000; break;
 18e:	88 e6       	ldi	r24, 0x68	; 104
 190:	88 bb       	out	0x18, r24	; 24
 192:	08 95       	ret
		case 'H':  PORTB = 	0b00001101; break;
 194:	8d e0       	ldi	r24, 0x0D	; 13
 196:	88 bb       	out	0x18, r24	; 24
 198:	08 95       	ret
		case 'i':  PORTB = 	0b11111000; break;
 19a:	88 ef       	ldi	r24, 0xF8	; 248
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	08 95       	ret
		case 'j':  PORTB = 	0b11101010; break;
 1a0:	8a ee       	ldi	r24, 0xEA	; 234
 1a2:	88 bb       	out	0x18, r24	; 24
 1a4:	08 95       	ret
		case 'k':  PORTB = 	0b00011101; break;
 1a6:	8d e1       	ldi	r24, 0x1D	; 29
 1a8:	88 bb       	out	0x18, r24	; 24
 1aa:	08 95       	ret
		case 'L':  PORTB = 	0b01111001; break;
 1ac:	89 e7       	ldi	r24, 0x79	; 121
 1ae:	88 bb       	out	0x18, r24	; 24
 1b0:	08 95       	ret
		case 'm':  PORTB = 	0b11001100; break;
 1b2:	8c ec       	ldi	r24, 0xCC	; 204
 1b4:	88 bb       	out	0x18, r24	; 24
 1b6:	08 95       	ret
		case 'n':  PORTB = 	0b11001101; break;
 1b8:	8d ec       	ldi	r24, 0xCD	; 205
 1ba:	88 bb       	out	0x18, r24	; 24
 1bc:	08 95       	ret
		case 'o':  PORTB = 	0b11001000; break;
 1be:	88 ec       	ldi	r24, 0xC8	; 200
 1c0:	88 bb       	out	0x18, r24	; 24
 1c2:	08 95       	ret
		case 'P':  PORTB = 	0b00011100; break;
 1c4:	8c e1       	ldi	r24, 0x1C	; 28
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	08 95       	ret
		case 'g':  PORTB = 	0b00001110; break;
 1ca:	8e e0       	ldi	r24, 0x0E	; 14
 1cc:	88 bb       	out	0x18, r24	; 24
 1ce:	08 95       	ret
		case 'r':  PORTB = 	0b11011101; break;
 1d0:	8d ed       	ldi	r24, 0xDD	; 221
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
		case 's':  PORTB = 	0b01001010; break;
 1d6:	8a e4       	ldi	r24, 0x4A	; 74
 1d8:	88 bb       	out	0x18, r24	; 24
 1da:	08 95       	ret
		case 't':  PORTB = 	0b01011001; break;
 1dc:	89 e5       	ldi	r24, 0x59	; 89
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	08 95       	ret
		case 'U':  PORTB = 	0b00101001; break;
 1e2:	89 e2       	ldi	r24, 0x29	; 41
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	08 95       	ret
		case 'v':  PORTB = 	0b11101000; break;
 1e8:	88 ee       	ldi	r24, 0xE8	; 232
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
		case 'w':  PORTB = 	0b00011011; break;
 1ee:	8b e1       	ldi	r24, 0x1B	; 27
 1f0:	88 bb       	out	0x18, r24	; 24
 1f2:	08 95       	ret
		case 'x':  PORTB = 	0b11101101; break;
 1f4:	8d ee       	ldi	r24, 0xED	; 237
 1f6:	88 bb       	out	0x18, r24	; 24
 1f8:	08 95       	ret
		case 'y':  PORTB = 	0b00001011; break;
 1fa:	8b e0       	ldi	r24, 0x0B	; 11
 1fc:	88 bb       	out	0x18, r24	; 24
 1fe:	08 95       	ret
		case 'z':  PORTB = 	0b11011010; break;
 200:	8a ed       	ldi	r24, 0xDA	; 218
 202:	88 bb       	out	0x18, r24	; 24
 204:	08 95       	ret
		case '.':  PORTB =  0b11110111; break;
 206:	87 ef       	ldi	r24, 0xF7	; 247
 208:	88 bb       	out	0x18, r24	; 24
 20a:	08 95       	ret
		case '-':  PORTB =  0b11011111; break;
 20c:	8f ed       	ldi	r24, 0xDF	; 223
 20e:	88 bb       	out	0x18, r24	; 24
 210:	08 95       	ret
		default:   PORTB =  0b11111111; break; // Для остальных значений отключаем
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	88 bb       	out	0x18, r24	; 24
 216:	08 95       	ret

00000218 <turnoffall>:
}

// Выключить все
static void turnoffall(void)
{
	PORTC &= ~0b00001111; /* Значени по умолчанию. Убираем остатки тока через подтяжку, если она есть */
 218:	85 b3       	in	r24, 0x15	; 21
 21a:	80 7f       	andi	r24, 0xF0	; 240
 21c:	85 bb       	out	0x15, r24	; 21
	PORTB = 0b11111111; /* Тушим свет для катодов */
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	88 bb       	out	0x18, r24	; 24
 222:	08 95       	ret

00000224 <turnon>:
}

// Включаем требуемый разряд
static void turnon(unsigned char seg)
{
	switch (seg)
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	69 f0       	breq	.+26     	; 0x242 <turnon+0x1e>
 228:	28 f0       	brcs	.+10     	; 0x234 <turnon+0x10>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	89 f0       	breq	.+34     	; 0x250 <turnon+0x2c>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	b1 f0       	breq	.+44     	; 0x25e <turnon+0x3a>
 232:	08 95       	ret
	{
		case 0:
		PORTC |= (1 << PORTC1); // Уровень 1
 234:	85 b3       	in	r24, 0x15	; 21
 236:	82 60       	ori	r24, 0x02	; 2
 238:	85 bb       	out	0x15, r24	; 21
		DDRC  |= (1 << PORTC1); // Выход
 23a:	84 b3       	in	r24, 0x14	; 20
 23c:	82 60       	ori	r24, 0x02	; 2
 23e:	84 bb       	out	0x14, r24	; 20
		break;
 240:	08 95       	ret
		
		case 1:
		PORTC |= (1 << PORTC2); // Уровень 1
 242:	85 b3       	in	r24, 0x15	; 21
 244:	84 60       	ori	r24, 0x04	; 4
 246:	85 bb       	out	0x15, r24	; 21
		DDRC  |= (1 << PORTC2); // Выход
 248:	84 b3       	in	r24, 0x14	; 20
 24a:	84 60       	ori	r24, 0x04	; 4
 24c:	84 bb       	out	0x14, r24	; 20
		break;
 24e:	08 95       	ret
		
		case 2:
		PORTC |= (1 << PORTC3); // Уровень 1
 250:	85 b3       	in	r24, 0x15	; 21
 252:	88 60       	ori	r24, 0x08	; 8
 254:	85 bb       	out	0x15, r24	; 21
		DDRC  |= (1 << PORTC3); // Выход
 256:	84 b3       	in	r24, 0x14	; 20
 258:	88 60       	ori	r24, 0x08	; 8
 25a:	84 bb       	out	0x14, r24	; 20
		break;
 25c:	08 95       	ret
		
		case 3:
		PORTC |= (1 << PORTC0); // Уровень 1
 25e:	85 b3       	in	r24, 0x15	; 21
 260:	81 60       	ori	r24, 0x01	; 1
 262:	85 bb       	out	0x15, r24	; 21
		DDRC  |= (1 << PORTC0); // Выход
 264:	84 b3       	in	r24, 0x14	; 20
 266:	81 60       	ori	r24, 0x01	; 1
 268:	84 bb       	out	0x14, r24	; 20
 26a:	08 95       	ret

0000026c <P>:

// Меняем точку зрения (меняем очередность сегментов)
static uint8_t P (uint8_t x)
{
	return ((sizeof(R) / sizeof(R[0])) - 1) - x;
}
 26c:	93 e0       	ldi	r25, 0x03	; 3
 26e:	98 1b       	sub	r25, r24
 270:	89 2f       	mov	r24, r25
 272:	08 95       	ret

00000274 <disp_init>:
static unsigned char ticker[] = {' ',' ',' ','s','t','A','r','t',' ','s','C','0','r','E',' ','v','1','0','0'}; 
bool update;            // Флаг перерисовки дисплея

void disp_init(void)
{
	DDRC  &= ~0b00001111; /* Аноды цифр по умолчанию на вход. Отключаем ток */
 274:	84 b3       	in	r24, 0x14	; 20
 276:	80 7f       	andi	r24, 0xF0	; 240
 278:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~0b00001111; /* Значени по умолчанию. Убираем остатки тока через подтяжку, если она есть */
 27a:	85 b3       	in	r24, 0x15	; 21
 27c:	80 7f       	andi	r24, 0xF0	; 240
 27e:	85 bb       	out	0x15, r24	; 21
	DDRB  = 0b11111111; /* Инициировать настройки портов. Стоит дешевле, чем приносит пользы */
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11111111; /* Тушим свет для катодов */
 284:	88 bb       	out	0x18, r24	; 24
	
	TCCR0 = 0b00000001; // установили пред-делитель
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<0);
 28a:	89 b7       	in	r24, 0x39	; 57
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0; // 255
 290:	12 be       	out	0x32, r1	; 50
 292:	08 95       	ret

00000294 <__vector_9>:
		break;
	}
}
//
ISR (TIMER0_OVF_vect) // Вывод по прерыванию 
{
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
	turnoffall();        // Отключаем все
 2b6:	b0 df       	rcall	.-160    	; 0x218 <turnoffall>
	segchar(R[n_count]);
 2b8:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <n_count>
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	e2 57       	subi	r30, 0x72	; 114
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	80 81       	ld	r24, Z
 2c4:	27 df       	rcall	.-434    	; 0x114 <segchar>
	turnon(n_count);     // Включаем ток
 2c6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <n_count>
 2ca:	ac df       	rcall	.-168    	; 0x224 <turnon>
	if (++n_count >= sizeof(R) / sizeof(R[0])) n_count = 0;
 2cc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <n_count>
 2d0:	8f 5f       	subi	r24, 0xFF	; 255
 2d2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <n_count>
 2d6:	84 30       	cpi	r24, 0x04	; 4
 2d8:	10 f0       	brcs	.+4      	; 0x2de <__vector_9+0x4a>
 2da:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <n_count>
	
	//--------------------------------------------
	if ((PIND & 0b00001000) && (PIND & 0b00000100)) retention = true; // Кнопки отжаты, можно сбросить состояние удержания
 2de:	83 9b       	sbis	0x10, 3	; 16
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <__vector_9+0x58>
 2e2:	82 9b       	sbis	0x10, 2	; 16
 2e4:	03 c0       	rjmp	.+6      	; 0x2ec <__vector_9+0x58>
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

	//--------------------------------------------
	if(!(PIND & 0b00001000) && consider_Down < bounce) consider_Down++; // Будем инкрементировать нажатое состояние кнопки
 2ec:	83 99       	sbic	0x10, 3	; 16
 2ee:	15 c0       	rjmp	.+42     	; 0x31a <__vector_9+0x86>
 2f0:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <consider_Down>
 2f4:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <consider_Down+0x1>
 2f8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <bounce>
 2fc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <bounce+0x1>
 300:	28 17       	cp	r18, r24
 302:	39 07       	cpc	r19, r25
 304:	54 f4       	brge	.+20     	; 0x31a <__vector_9+0x86>
 306:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <consider_Down>
 30a:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <consider_Down+0x1>
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <consider_Down+0x1>
 314:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <consider_Down>
 318:	10 c0       	rjmp	.+32     	; 0x33a <__vector_9+0xa6>
	else
	{
		if (consider_Down > 0) consider_Down--;                         // Будем декрементировать если кнопка отпущена
 31a:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <consider_Down>
 31e:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <consider_Down+0x1>
 322:	18 16       	cp	r1, r24
 324:	19 06       	cpc	r1, r25
 326:	4c f4       	brge	.+18     	; 0x33a <__vector_9+0xa6>
 328:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <consider_Down>
 32c:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <consider_Down+0x1>
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <consider_Down+0x1>
 336:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <consider_Down>
	}
	//--------------------------------------------
	if(!(PIND & 0b00000100) && consider_Up < bounce) consider_Up++;     // Будем инкрементировать нажатое состояние кнопки
 33a:	82 99       	sbic	0x10, 2	; 16
 33c:	15 c0       	rjmp	.+42     	; 0x368 <__vector_9+0xd4>
 33e:	20 91 89 00 	lds	r18, 0x0089	; 0x800089 <consider_Up>
 342:	30 91 8a 00 	lds	r19, 0x008A	; 0x80008a <consider_Up+0x1>
 346:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <bounce>
 34a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <bounce+0x1>
 34e:	28 17       	cp	r18, r24
 350:	39 07       	cpc	r19, r25
 352:	54 f4       	brge	.+20     	; 0x368 <__vector_9+0xd4>
 354:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <consider_Up>
 358:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <consider_Up+0x1>
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <consider_Up+0x1>
 362:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <consider_Up>
 366:	10 c0       	rjmp	.+32     	; 0x388 <__vector_9+0xf4>
	else
	{
		if (consider_Up > 0) consider_Up--;                             // Будем декрементировать если кнопка отпущена
 368:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <consider_Up>
 36c:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <consider_Up+0x1>
 370:	18 16       	cp	r1, r24
 372:	19 06       	cpc	r1, r25
 374:	4c f4       	brge	.+18     	; 0x388 <__vector_9+0xf4>
 376:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <consider_Up>
 37a:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <consider_Up+0x1>
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <consider_Up+0x1>
 384:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <consider_Up>
	}
}
 388:	ff 91       	pop	r31
 38a:	ef 91       	pop	r30
 38c:	bf 91       	pop	r27
 38e:	af 91       	pop	r26
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	7f 91       	pop	r23
 396:	6f 91       	pop	r22
 398:	5f 91       	pop	r21
 39a:	4f 91       	pop	r20
 39c:	3f 91       	pop	r19
 39e:	2f 91       	pop	r18
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <disp_out>:
	return ((sizeof(R) / sizeof(R[0])) - 1) - x;
}

// Присваиваем каждому сигменту своё число
void disp_out(unsigned int number)
{
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	8c 01       	movw	r16, r24
	static unsigned char Rl[4];
	for (uint8_t i = 0; i < sizeof(R) / sizeof(R[0]); i++)
 3b2:	c0 e0       	ldi	r28, 0x00	; 0
 3b4:	38 c0       	rjmp	.+112    	; 0x426 <__DATA_REGION_LENGTH__+0x26>
	{
		//[P(i)] возвращяем удобное для нас значения
		Rl[P(i)] = '0' + number % 10;
 3b6:	8c 2f       	mov	r24, r28
 3b8:	59 df       	rcall	.-334    	; 0x26c <P>
 3ba:	48 2f       	mov	r20, r24
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	98 01       	movw	r18, r16
 3c0:	ad ec       	ldi	r26, 0xCD	; 205
 3c2:	bc ec       	ldi	r27, 0xCC	; 204
 3c4:	cd d1       	rcall	.+922    	; 0x760 <__umulhisi3>
 3c6:	96 95       	lsr	r25
 3c8:	87 95       	ror	r24
 3ca:	96 95       	lsr	r25
 3cc:	87 95       	ror	r24
 3ce:	96 95       	lsr	r25
 3d0:	87 95       	ror	r24
 3d2:	9c 01       	movw	r18, r24
 3d4:	22 0f       	add	r18, r18
 3d6:	33 1f       	adc	r19, r19
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	82 0f       	add	r24, r18
 3e6:	93 1f       	adc	r25, r19
 3e8:	98 01       	movw	r18, r16
 3ea:	28 1b       	sub	r18, r24
 3ec:	39 0b       	sbc	r19, r25
 3ee:	c9 01       	movw	r24, r18
 3f0:	fa 01       	movw	r30, r20
 3f2:	e0 58       	subi	r30, 0x80	; 128
 3f4:	ff 4f       	sbci	r31, 0xFF	; 255
 3f6:	80 5d       	subi	r24, 0xD0	; 208
 3f8:	80 83       	st	Z, r24
		if(i && !number) Rl[P(i)] = ' ';
 3fa:	cc 23       	and	r28, r28
 3fc:	41 f0       	breq	.+16     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 3fe:	01 15       	cp	r16, r1
 400:	11 05       	cpc	r17, r1
 402:	29 f4       	brne	.+10     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 404:	fa 01       	movw	r30, r20
 406:	e0 58       	subi	r30, 0x80	; 128
 408:	ff 4f       	sbci	r31, 0xFF	; 255
 40a:	80 e2       	ldi	r24, 0x20	; 32
 40c:	80 83       	st	Z, r24
		number /= 10;
 40e:	98 01       	movw	r18, r16
 410:	ad ec       	ldi	r26, 0xCD	; 205
 412:	bc ec       	ldi	r27, 0xCC	; 204
 414:	a5 d1       	rcall	.+842    	; 0x760 <__umulhisi3>
 416:	8c 01       	movw	r16, r24
 418:	16 95       	lsr	r17
 41a:	07 95       	ror	r16
 41c:	16 95       	lsr	r17
 41e:	07 95       	ror	r16
 420:	16 95       	lsr	r17
 422:	07 95       	ror	r16

// Присваиваем каждому сигменту своё число
void disp_out(unsigned int number)
{
	static unsigned char Rl[4];
	for (uint8_t i = 0; i < sizeof(R) / sizeof(R[0]); i++)
 424:	cf 5f       	subi	r28, 0xFF	; 255
 426:	c4 30       	cpi	r28, 0x04	; 4
 428:	30 f2       	brcs	.-116    	; 0x3b6 <disp_out+0xc>
		Rl[P(i)] = '0' + number % 10;
		if(i && !number) Rl[P(i)] = ' ';
		number /= 10;
	}
	
	cli();            // Открываем критическую секцию
 42a:	f8 94       	cli
	for (int w = 0; w < sizeof(R) / sizeof(R[0]);  w++)
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	09 c0       	rjmp	.+18     	; 0x444 <__DATA_REGION_LENGTH__+0x44>
	{
		R[w] = Rl[w]; // Обновляем Локальную копию массива регистров
 432:	fc 01       	movw	r30, r24
 434:	e0 58       	subi	r30, 0x80	; 128
 436:	ff 4f       	sbci	r31, 0xFF	; 255
 438:	20 81       	ld	r18, Z
 43a:	fc 01       	movw	r30, r24
 43c:	e2 57       	subi	r30, 0x72	; 114
 43e:	ff 4f       	sbci	r31, 0xFF	; 255
 440:	20 83       	st	Z, r18
		if(i && !number) Rl[P(i)] = ' ';
		number /= 10;
	}
	
	cli();            // Открываем критическую секцию
	for (int w = 0; w < sizeof(R) / sizeof(R[0]);  w++)
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	84 30       	cpi	r24, 0x04	; 4
 446:	91 05       	cpc	r25, r1
 448:	a0 f3       	brcs	.-24     	; 0x432 <__DATA_REGION_LENGTH__+0x32>
	{
		R[w] = Rl[w]; // Обновляем Локальную копию массива регистров
	}
	sei();            // Закрываем критическую секцию
 44a:	78 94       	sei
}
 44c:	cf 91       	pop	r28
 44e:	1f 91       	pop	r17
 450:	0f 91       	pop	r16
 452:	08 95       	ret

00000454 <ledprintRun>:

void ledprintRun(void)
{
	static unsigned char Rj[4];    // Обьявим локальный массив для разрядов вывода программы
	
	for (uint8_t n = 0; n < sizeof(ticker) / sizeof(ticker[0]); n++)
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	48 c0       	rjmp	.+144    	; 0x4e8 <__stack+0x89>
	{
		Rj[0] = ticker[n];
 458:	84 2f       	mov	r24, r20
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	fc 01       	movw	r30, r24
 45e:	e8 59       	subi	r30, 0x98	; 152
 460:	ff 4f       	sbci	r31, 0xFF	; 255
 462:	20 81       	ld	r18, Z
 464:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__data_end>
		Rj[1] = ticker[n + 1 > (sizeof(ticker) / sizeof(ticker[0]) -1) ? 0 : n + 1];
 468:	9c 01       	movw	r18, r24
 46a:	2f 5f       	subi	r18, 0xFF	; 255
 46c:	3f 4f       	sbci	r19, 0xFF	; 255
 46e:	23 31       	cpi	r18, 0x13	; 19
 470:	31 05       	cpc	r19, r1
 472:	10 f0       	brcs	.+4      	; 0x478 <__stack+0x19>
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	f9 01       	movw	r30, r18
 47a:	e8 59       	subi	r30, 0x98	; 152
 47c:	ff 4f       	sbci	r31, 0xFF	; 255
 47e:	20 81       	ld	r18, Z
 480:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <__data_end+0x1>
		Rj[2] = ticker[n + 2 > (sizeof(ticker) / sizeof(ticker[0]) -1) ? 0 : n + 2];
 484:	9c 01       	movw	r18, r24
 486:	2e 5f       	subi	r18, 0xFE	; 254
 488:	3f 4f       	sbci	r19, 0xFF	; 255
 48a:	23 31       	cpi	r18, 0x13	; 19
 48c:	31 05       	cpc	r19, r1
 48e:	10 f0       	brcs	.+4      	; 0x494 <__stack+0x35>
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	f9 01       	movw	r30, r18
 496:	e8 59       	subi	r30, 0x98	; 152
 498:	ff 4f       	sbci	r31, 0xFF	; 255
 49a:	20 81       	ld	r18, Z
 49c:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <__data_end+0x2>
		Rj[3] = ticker[n + 3 > (sizeof(ticker) / sizeof(ticker[0]) -1) ? 0 : n + 3];
 4a0:	03 96       	adiw	r24, 0x03	; 3
 4a2:	83 31       	cpi	r24, 0x13	; 19
 4a4:	91 05       	cpc	r25, r1
 4a6:	10 f0       	brcs	.+4      	; 0x4ac <__stack+0x4d>
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	fc 01       	movw	r30, r24
 4ae:	e8 59       	subi	r30, 0x98	; 152
 4b0:	ff 4f       	sbci	r31, 0xFF	; 255
 4b2:	80 81       	ld	r24, Z
 4b4:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__data_end+0x3>
		
		cli();            // Открываем критическую секцию
 4b8:	f8 94       	cli
		for (int x = 0; x < sizeof(R) / sizeof(R[0]);  x++)
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	09 c0       	rjmp	.+18     	; 0x4d2 <__stack+0x73>
		{
			R[x] = Rj[x]; // Обновляем Локальную копию массива регистров
 4c0:	fc 01       	movw	r30, r24
 4c2:	e4 58       	subi	r30, 0x84	; 132
 4c4:	ff 4f       	sbci	r31, 0xFF	; 255
 4c6:	20 81       	ld	r18, Z
 4c8:	fc 01       	movw	r30, r24
 4ca:	e2 57       	subi	r30, 0x72	; 114
 4cc:	ff 4f       	sbci	r31, 0xFF	; 255
 4ce:	20 83       	st	Z, r18
		Rj[1] = ticker[n + 1 > (sizeof(ticker) / sizeof(ticker[0]) -1) ? 0 : n + 1];
		Rj[2] = ticker[n + 2 > (sizeof(ticker) / sizeof(ticker[0]) -1) ? 0 : n + 2];
		Rj[3] = ticker[n + 3 > (sizeof(ticker) / sizeof(ticker[0]) -1) ? 0 : n + 3];
		
		cli();            // Открываем критическую секцию
		for (int x = 0; x < sizeof(R) / sizeof(R[0]);  x++)
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	84 30       	cpi	r24, 0x04	; 4
 4d4:	91 05       	cpc	r25, r1
 4d6:	a0 f3       	brcs	.-24     	; 0x4c0 <__stack+0x61>
		{
			R[x] = Rj[x]; // Обновляем Локальную копию массива регистров
		}
		sei();            // Закрываем критическую секцию
 4d8:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4da:	81 ee       	ldi	r24, 0xE1	; 225
 4dc:	94 e0       	ldi	r25, 0x04	; 4
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <__stack+0x7f>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <__stack+0x85>
 4e4:	00 00       	nop

void ledprintRun(void)
{
	static unsigned char Rj[4];    // Обьявим локальный массив для разрядов вывода программы
	
	for (uint8_t n = 0; n < sizeof(ticker) / sizeof(ticker[0]); n++)
 4e6:	4f 5f       	subi	r20, 0xFF	; 255
 4e8:	43 31       	cpi	r20, 0x13	; 19
 4ea:	08 f4       	brcc	.+2      	; 0x4ee <__stack+0x8f>
 4ec:	b5 cf       	rjmp	.-150    	; 0x458 <ledprintRun+0x4>
		}
		sei();            // Закрываем критическую секцию
		
		_delay_ms(5);
	}
	update = true;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <update>
 4f4:	08 95       	ret

000004f6 <buttons_ringing>:
}

void buttons_ringing (void) // Обрабатываем звон контакта кнопки
{
	if ((consider_Down == bounce) && retention) klik_Down = true;  // Будем считать что кнопка нажата
 4f6:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <consider_Down>
 4fa:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <consider_Down+0x1>
 4fe:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <bounce>
 502:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <bounce+0x1>
 506:	28 17       	cp	r18, r24
 508:	39 07       	cpc	r19, r25
 50a:	39 f4       	brne	.+14     	; 0x51a <buttons_ringing+0x24>
 50c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 510:	88 23       	and	r24, r24
 512:	19 f0       	breq	.+6      	; 0x51a <buttons_ringing+0x24>
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <klik_Down>
	//--------------------------------------------
	if ((consider_Up == bounce) && retention) klik_Up = true;      // Будем считать что кнопка нажата
 51a:	20 91 89 00 	lds	r18, 0x0089	; 0x800089 <consider_Up>
 51e:	30 91 8a 00 	lds	r19, 0x008A	; 0x80008a <consider_Up+0x1>
 522:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <bounce>
 526:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <bounce+0x1>
 52a:	28 17       	cp	r18, r24
 52c:	39 07       	cpc	r19, r25
 52e:	39 f4       	brne	.+14     	; 0x53e <buttons_ringing+0x48>
 530:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 534:	88 23       	and	r24, r24
 536:	19 f0       	breq	.+6      	; 0x53e <buttons_ringing+0x48>
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <klik_Up>
 53e:	08 95       	ret

00000540 <timer_ini>:
extern bool retention; // Защитимся от удержании кнопки

// Заводим таймер 
static void timer_ini(void)
{
	TCCR1B |= (1<<WGM12); // Устанавливаем режим СТС (сброс по совпадению)
 540:	8e b5       	in	r24, 0x2e	; 46
 542:	88 60       	ori	r24, 0x08	; 8
 544:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); // Устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
 546:	89 b7       	in	r24, 0x39	; 57
 548:	80 61       	ori	r24, 0x10	; 16
 54a:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00000000;  // Записываем в регистр число для сравнения
 54c:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0b01100100;  
 54e:	84 e6       	ldi	r24, 0x64	; 100
 550:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS10);  // Установим делитель.
 552:	8e b5       	in	r24, 0x2e	; 46
 554:	81 60       	ori	r24, 0x01	; 1
 556:	8e bd       	out	0x2e, r24	; 46
 558:	08 95       	ret

0000055a <Prog_print.1763>:
	
	ledprintRun(); // Приветствие Бегущей строкой 

// Выводим режимы подсчета при нажатой кнопке 
	void Prog_print(void)
	{
 55a:	2f 92       	push	r2
 55c:	3f 92       	push	r3
		retention = false; // Выполним один раз на один клик кнопки, без удержаний 
 55e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		klik_Up = false; // Сбрасываем флаг, иначи не прекрашает переключать
 562:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <klik_Up>
		klik_Down = false;
 566:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <klik_Down>
		static unsigned char Rp[4] = {'P','r',' ','0'};    // Обьявим локальный массив для разрядов вывода программы
		Rp[3] = '0' + prog_step;
 56a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <prog_step>
 56e:	80 5d       	subi	r24, 0xD0	; 208
 570:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Rp.1765+0x3>
		
		cli();            // Открываем критическую секцию
 574:	f8 94       	cli
		for (int x = 0; x < sizeof(R) / sizeof(R[0]);  x++)
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	09 c0       	rjmp	.+18     	; 0x58e <Prog_print.1763+0x34>
		{
			R[x] = Rp[x]; // Обновляем Локальную копию массива регистров
 57c:	fc 01       	movw	r30, r24
 57e:	ed 59       	subi	r30, 0x9D	; 157
 580:	ff 4f       	sbci	r31, 0xFF	; 255
 582:	20 81       	ld	r18, Z
 584:	fc 01       	movw	r30, r24
 586:	e2 57       	subi	r30, 0x72	; 114
 588:	ff 4f       	sbci	r31, 0xFF	; 255
 58a:	20 83       	st	Z, r18
		klik_Down = false;
		static unsigned char Rp[4] = {'P','r',' ','0'};    // Обьявим локальный массив для разрядов вывода программы
		Rp[3] = '0' + prog_step;
		
		cli();            // Открываем критическую секцию
		for (int x = 0; x < sizeof(R) / sizeof(R[0]);  x++)
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	84 30       	cpi	r24, 0x04	; 4
 590:	91 05       	cpc	r25, r1
 592:	a0 f3       	brcs	.-24     	; 0x57c <Prog_print.1763+0x22>
		{
			R[x] = Rp[x]; // Обновляем Локальную копию массива регистров
		}
		sei();            // Закрываем критическую секцию
 594:	78 94       	sei
 596:	87 e8       	ldi	r24, 0x87	; 135
 598:	93 e1       	ldi	r25, 0x13	; 19
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <Prog_print.1763+0x40>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <Prog_print.1763+0x46>
 5a0:	00 00       	nop
		
		_delay_ms(20);    
		update_cnt = true;
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	f1 01       	movw	r30, r2
 5a6:	80 83       	st	Z, r24
	}
 5a8:	3f 90       	pop	r3
 5aa:	2f 90       	pop	r2
 5ac:	08 95       	ret

000005ae <__vector_6>:
	TCCR1B |= (1<<CS10);  // Установим делитель.
}

// Действия при прерывание по таймеру
ISR (TIMER1_COMPA_vect)
{
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	2f 93       	push	r18
 5ba:	3f 93       	push	r19
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
	static unsigned char new_state=0; // Переменные энкодера
	static unsigned char old_state=0; // Переменные энкодера

	new_state = (PINC & 0b00110000) >> 4;
 5c0:	83 b3       	in	r24, 0x13	; 19
 5c2:	80 73       	andi	r24, 0x30	; 48
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	95 95       	asr	r25
 5c8:	87 95       	ror	r24
 5ca:	95 95       	asr	r25
 5cc:	87 95       	ror	r24
 5ce:	95 95       	asr	r25
 5d0:	87 95       	ror	r24
 5d2:	95 95       	asr	r25
 5d4:	87 95       	ror	r24
	
	// Если вдруг обнаружим низкое состояние (кнопка нажата), то обнулим счётчик
	if(!(PIND & 0b00010000)) cnt = 0; 
 5d6:	84 99       	sbic	0x10, 4	; 16
 5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <__vector_6+0x34>
 5da:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <cnt+0x1>
 5de:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <cnt>
	
	switch(old_state | new_state) // Обработка импульсов с энкодера 
 5e2:	20 91 8b 00 	lds	r18, 0x008B	; 0x80008b <old_state.1748>
 5e6:	28 2b       	or	r18, r24
 5e8:	24 30       	cpi	r18, 0x04	; 4
 5ea:	99 f0       	breq	.+38     	; 0x612 <__vector_6+0x64>
 5ec:	18 f4       	brcc	.+6      	; 0x5f4 <__vector_6+0x46>
 5ee:	21 30       	cpi	r18, 0x01	; 1
 5f0:	29 f0       	breq	.+10     	; 0x5fc <__vector_6+0x4e>
 5f2:	19 c0       	rjmp	.+50     	; 0x626 <__vector_6+0x78>
 5f4:	2b 30       	cpi	r18, 0x0B	; 11
 5f6:	69 f0       	breq	.+26     	; 0x612 <__vector_6+0x64>
 5f8:	2e 30       	cpi	r18, 0x0E	; 14
 5fa:	a9 f4       	brne	.+42     	; 0x626 <__vector_6+0x78>
	{
		case 0x01: case 0x0e:
		cnt++;
 5fc:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <cnt>
 600:	30 91 8d 00 	lds	r19, 0x008D	; 0x80008d <cnt+0x1>
 604:	2f 5f       	subi	r18, 0xFF	; 255
 606:	3f 4f       	sbci	r19, 0xFF	; 255
 608:	30 93 8d 00 	sts	0x008D, r19	; 0x80008d <cnt+0x1>
 60c:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <cnt>
		break;
 610:	0a c0       	rjmp	.+20     	; 0x626 <__vector_6+0x78>
		case 0x04: case 0x0b: 
		cnt--;
 612:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <cnt>
 616:	30 91 8d 00 	lds	r19, 0x008D	; 0x80008d <cnt+0x1>
 61a:	21 50       	subi	r18, 0x01	; 1
 61c:	31 09       	sbc	r19, r1
 61e:	30 93 8d 00 	sts	0x008D, r19	; 0x80008d <cnt+0x1>
 622:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <cnt>
		break;
	}
	old_state = new_state << 2;
 626:	88 0f       	add	r24, r24
 628:	88 0f       	add	r24, r24
 62a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <old_state.1748>
}
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	3f 91       	pop	r19
 634:	2f 91       	pop	r18
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <main>:

// Начинаем начинать 
int main(void)
{
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	1f 92       	push	r1
 646:	cd b7       	in	r28, 0x3d	; 61
 648:	de b7       	in	r29, 0x3e	; 62
	short cnt_local = 0;    // Для сохранения подсчета внутри критической секции
	extern bool update;     // Флаг перерисовки дисплея, с другого файла 
	extern bool klik_Down; // Состаяние кнопки Down, с другого файла
	extern bool klik_Up;   // Состаяние кнопки Up, с другого файла
	bool update_cnt = false;// Флаг пересчета
 64a:	19 82       	std	Y+1, r1	; 0x01
	
	DDRC  &= ~0b00110000;   // Вход энкодера
 64c:	84 b3       	in	r24, 0x14	; 20
 64e:	8f 7c       	andi	r24, 0xCF	; 207
 650:	84 bb       	out	0x14, r24	; 20
	PORTC |=  0b00110000;   // Подтяжка
 652:	85 b3       	in	r24, 0x15	; 21
 654:	80 63       	ori	r24, 0x30	; 48
 656:	85 bb       	out	0x15, r24	; 21
	DDRD  &= ~0b00011100;   // Кнопка сброса, down и up
 658:	81 b3       	in	r24, 0x11	; 17
 65a:	83 7e       	andi	r24, 0xE3	; 227
 65c:	81 bb       	out	0x11, r24	; 17
	PORTD |=  0b00011100;   // Подтяжка
 65e:	82 b3       	in	r24, 0x12	; 18
 660:	8c 61       	ori	r24, 0x1C	; 28
 662:	82 bb       	out	0x12, r24	; 18
	//--------------------------------------------
	disp_init(); // Подключаем дисплей 
 664:	07 de       	rcall	.-1010   	; 0x274 <disp_init>
	timer_ini(); // Таймер для опроса энкодера 
 666:	6c df       	rcall	.-296    	; 0x540 <timer_ini>
	//--------------------------------------------
	sei(); // Разрешаем прерывания. Это важно!
 668:	78 94       	sei
	
	ledprintRun(); // Приветствие Бегущей строкой 
 66a:	f4 de       	rcall	.-536    	; 0x454 <ledprintRun>
}

// Начинаем начинать 
int main(void)
{
	short cnt_local = 0;    // Для сохранения подсчета внутри критической секции
 66c:	00 e0       	ldi	r16, 0x00	; 0
 66e:	10 e0       	ldi	r17, 0x00	; 0
	}
		
	//--------------------------------------------	
	while(1)
	{
		buttons_ringing (); // Обрабатываем звон контакта кнопки
 670:	42 df       	rcall	.-380    	; 0x4f6 <buttons_ringing>
		
		//--------------------------------------------
		cli();                // Открываем критическую секцию 
 672:	f8 94       	cli
		if (cnt_local != cnt || update_cnt) // Если счетчик изменился?
 674:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <cnt>
 678:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <cnt+0x1>
 67c:	08 17       	cp	r16, r24
 67e:	19 07       	cpc	r17, r25
 680:	19 f4       	brne	.+6      	; 0x688 <main+0x48>
 682:	89 81       	ldd	r24, Y+1	; 0x01
 684:	88 23       	and	r24, r24
 686:	a9 f0       	breq	.+42     	; 0x6b2 <main+0x72>
		{
			update_cnt = false; // Сбросим флаг пересчета 
 688:	19 82       	std	Y+1, r1	; 0x01
			
			// Обновляем Локальную копию счетчика + шаг программы 
			if (prog_step > 2) cnt_local = cnt / (prog_step / 2); 
 68a:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <prog_step>
 68e:	63 30       	cpi	r22, 0x03	; 3
 690:	48 f0       	brcs	.+18     	; 0x6a4 <main+0x64>
 692:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <cnt>
 696:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <cnt+0x1>
 69a:	66 95       	lsr	r22
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	4d d0       	rcall	.+154    	; 0x73a <__divmodhi4>
 6a0:	8b 01       	movw	r16, r22
 6a2:	04 c0       	rjmp	.+8      	; 0x6ac <main+0x6c>
			
			// по факту один подсчет экодера уже равен 2 и по этому prog_step / 2, чтобы получилось 1,2,4
			else cnt_local = cnt;
 6a4:	00 91 8c 00 	lds	r16, 0x008C	; 0x80008c <cnt>
 6a8:	10 91 8d 00 	lds	r17, 0x008D	; 0x80008d <cnt+0x1>
			update = true;      // Устанавливаем флаг перерисовки дисплея
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <update>
		}
		sei();                // Закрываем критическую секцию
 6b2:	78 94       	sei
		
		//--------------------------------------------
		if (update)           // Флаг установлен?
 6b4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <update>
 6b8:	88 23       	and	r24, r24
 6ba:	51 f0       	breq	.+20     	; 0x6d0 <main+0x90>
		{
			update = false;   // Сбрасывем флаг
 6bc:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <update>
			/*
			из отрицательного числа делаем положительное 
			что бы не зависть от направления вращения энкодера после включения
			*/
			disp_out(cnt_local >= 0 ? cnt_local : -cnt_local); // Шедевр простоты !!!
 6c0:	c8 01       	movw	r24, r16
 6c2:	11 23       	and	r17, r17
 6c4:	24 f4       	brge	.+8      	; 0x6ce <main+0x8e>
 6c6:	88 27       	eor	r24, r24
 6c8:	99 27       	eor	r25, r25
 6ca:	80 1b       	sub	r24, r16
 6cc:	91 0b       	sbc	r25, r17
 6ce:	6d de       	rcall	.-806    	; 0x3aa <disp_out>
				
		//--------------------------------------------
		// Добавил вывод на экран программы и систему ее переключения
		// Получилось очень растянуто, уверен что можно перепесать более грамотно 
		
		if(klik_Up && prog_step < 8) // Инкрементируем шаг программы при нажатой кнопки 
 6d0:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <klik_Up>
 6d4:	88 23       	and	r24, r24
 6d6:	59 f0       	breq	.+22     	; 0x6ee <main+0xae>
 6d8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <prog_step>
 6dc:	88 30       	cpi	r24, 0x08	; 8
 6de:	38 f4       	brcc	.+14     	; 0x6ee <main+0xae>
		{
			prog_step *= 2;
 6e0:	88 0f       	add	r24, r24
 6e2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <prog_step>
			Prog_print();
 6e6:	ce 01       	movw	r24, r28
 6e8:	01 96       	adiw	r24, 0x01	; 1
 6ea:	1c 01       	movw	r2, r24
 6ec:	36 df       	rcall	.-404    	; 0x55a <Prog_print.1763>
		}
		if(klik_Down && prog_step > 2) // Декрементируем шаг 
 6ee:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <klik_Down>
 6f2:	88 23       	and	r24, r24
 6f4:	59 f0       	breq	.+22     	; 0x70c <main+0xcc>
 6f6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <prog_step>
 6fa:	83 30       	cpi	r24, 0x03	; 3
 6fc:	38 f0       	brcs	.+14     	; 0x70c <main+0xcc>
		{
			prog_step /= 2;
 6fe:	86 95       	lsr	r24
 700:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <prog_step>
			Prog_print();
 704:	ce 01       	movw	r24, r28
 706:	01 96       	adiw	r24, 0x01	; 1
 708:	1c 01       	movw	r2, r24
 70a:	27 df       	rcall	.-434    	; 0x55a <Prog_print.1763>
		}
		if((klik_Up && prog_step == 8) || (klik_Down && prog_step == 2)) // Подскажем что мы в крайних положениях программы 
 70c:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <klik_Up>
 710:	88 23       	and	r24, r24
 712:	21 f0       	breq	.+8      	; 0x71c <main+0xdc>
 714:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <prog_step>
 718:	88 30       	cpi	r24, 0x08	; 8
 71a:	51 f0       	breq	.+20     	; 0x730 <main+0xf0>
 71c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <klik_Down>
 720:	88 23       	and	r24, r24
 722:	09 f4       	brne	.+2      	; 0x726 <main+0xe6>
 724:	a5 cf       	rjmp	.-182    	; 0x670 <main+0x30>
 726:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <prog_step>
 72a:	82 30       	cpi	r24, 0x02	; 2
 72c:	09 f0       	breq	.+2      	; 0x730 <main+0xf0>
 72e:	a0 cf       	rjmp	.-192    	; 0x670 <main+0x30>
		{
			Prog_print();
 730:	ce 01       	movw	r24, r28
 732:	01 96       	adiw	r24, 0x01	; 1
 734:	1c 01       	movw	r2, r24
 736:	11 df       	rcall	.-478    	; 0x55a <Prog_print.1763>
 738:	9b cf       	rjmp	.-202    	; 0x670 <main+0x30>

0000073a <__divmodhi4>:
 73a:	97 fb       	bst	r25, 7
 73c:	07 2e       	mov	r0, r23
 73e:	16 f4       	brtc	.+4      	; 0x744 <__divmodhi4+0xa>
 740:	00 94       	com	r0
 742:	06 d0       	rcall	.+12     	; 0x750 <__divmodhi4_neg1>
 744:	77 fd       	sbrc	r23, 7
 746:	08 d0       	rcall	.+16     	; 0x758 <__divmodhi4_neg2>
 748:	17 d0       	rcall	.+46     	; 0x778 <__udivmodhi4>
 74a:	07 fc       	sbrc	r0, 7
 74c:	05 d0       	rcall	.+10     	; 0x758 <__divmodhi4_neg2>
 74e:	3e f4       	brtc	.+14     	; 0x75e <__divmodhi4_exit>

00000750 <__divmodhi4_neg1>:
 750:	90 95       	com	r25
 752:	81 95       	neg	r24
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	08 95       	ret

00000758 <__divmodhi4_neg2>:
 758:	70 95       	com	r23
 75a:	61 95       	neg	r22
 75c:	7f 4f       	sbci	r23, 0xFF	; 255

0000075e <__divmodhi4_exit>:
 75e:	08 95       	ret

00000760 <__umulhisi3>:
 760:	a2 9f       	mul	r26, r18
 762:	b0 01       	movw	r22, r0
 764:	b3 9f       	mul	r27, r19
 766:	c0 01       	movw	r24, r0
 768:	a3 9f       	mul	r26, r19
 76a:	01 d0       	rcall	.+2      	; 0x76e <__umulhisi3+0xe>
 76c:	b2 9f       	mul	r27, r18
 76e:	70 0d       	add	r23, r0
 770:	81 1d       	adc	r24, r1
 772:	11 24       	eor	r1, r1
 774:	91 1d       	adc	r25, r1
 776:	08 95       	ret

00000778 <__udivmodhi4>:
 778:	aa 1b       	sub	r26, r26
 77a:	bb 1b       	sub	r27, r27
 77c:	51 e1       	ldi	r21, 0x11	; 17
 77e:	07 c0       	rjmp	.+14     	; 0x78e <__udivmodhi4_ep>

00000780 <__udivmodhi4_loop>:
 780:	aa 1f       	adc	r26, r26
 782:	bb 1f       	adc	r27, r27
 784:	a6 17       	cp	r26, r22
 786:	b7 07       	cpc	r27, r23
 788:	10 f0       	brcs	.+4      	; 0x78e <__udivmodhi4_ep>
 78a:	a6 1b       	sub	r26, r22
 78c:	b7 0b       	sbc	r27, r23

0000078e <__udivmodhi4_ep>:
 78e:	88 1f       	adc	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	5a 95       	dec	r21
 794:	a9 f7       	brne	.-22     	; 0x780 <__udivmodhi4_loop>
 796:	80 95       	com	r24
 798:	90 95       	com	r25
 79a:	bc 01       	movw	r22, r24
 79c:	cd 01       	movw	r24, r26
 79e:	08 95       	ret

000007a0 <_exit>:
 7a0:	f8 94       	cli

000007a2 <__stop_program>:
 7a2:	ff cf       	rjmp	.-2      	; 0x7a2 <__stop_program>
